var PLEASE_WAIT_TEXT = "Please Wait";

function tabCheck(key_val) {
	if (event.keyCode == 9) {
		document.forms[0].fromAirport.focus();
	}
}
function reviewTab(key_val){
	if (event.keyCode == 9) {
		document.forms[0].phoneNumber.focus();
	}
}

function nonrevSubmitSearch(){
	var motherPage = window.dialogArguments;
	motherPage.location.href="javascript:submitSearch()"; 
	window.close();	
}

function reviewTab2(key_val, field){
	if(field.checked == false){
		if (event.keyCode == 9) {
			document.forms[0].phoneNumber.focus();
		}
	}
}

function checkKeyEnterCrew(key_val) {
	if (event.keyCode == 13) {
		searchCrew();
	}
}

function checkKey(event) {
	if (event.keyCode == 13) {
		var defaultAction = document.forms[0].defaultAction;
		if (defaultAction != null) {
			if (defaultAction.value == "search") {
				submitSearch();
			}
		}
	}
}

function checkKeyNonRevCoBusSearch(event){
	if (event.keyCode == 13) {
		var currObj = document.activeElement.id;
		if(currObj != 'submit1' && currObj != 'submit2'){
			submitSearch();
		}	
	}
}

function checkNumber() {
	var num = document.forms[0].rotationNumber.value;
	if (num == null || num == "") {
		num = "";
	} else if (num.length == 1) {
		num = "000" + num;
	} else if (num.length == 2) {
		num = "00" + num;
	} else if (num.length == 3) {
		num = "0" + num;
	}
	document.forms[0].rotationNumber.value = num;
}

function addMyName(confirmationNumber) {
	var resp = confirm("Are you sure you want to add your name to this reservation?");
	if (resp) {
		document.forms[0].confirmationNumber.value = confirmationNumber;
		//mia fix for QC 1685 - Crew Secured Flights
		document.forms[0].action = "crewTsaSecureFltDetails.action?tsaProcess=tsaProcess";
		//mia end
		document.forms[0].submit();
	}
}

function cobusSubmit() {
	document.forms[0].action = "companyBusinessSearch.action";
	document.forms[0].submit();
}

function showCobus() {
	document.forms[0].action = "companyBusinessSearch.action";
	document.forms[0].submit();
}

function searchCrew() {
	var from = document.forms[0].fromAirport.value;
	var to = document.forms[0].toAirport.value;
	var flightNumber = document.forms[0].flightNumber.value;
	var rotationNumber = document.forms[0].rotationNumber.value;
	var leaveDate = document.forms[0].leaveDate;
	var message = "";
	var invalidCode = "";
	var check = true;

	if (flightNumber == null || flightNumber == "") {
		message = message + "Flight number is required.\n";
		check = false;
	}
	if(flightNumber != null && !isNumeric(flightNumber)){
		message = message + "Invalid Format for Flight Number.\n";
		check = false;
	}		
	if (leaveDate.value == null || leaveDate.value == "") {
		message = message + "Departure date is required.\n";
		check = false;
	}
	if (rotationNumber == null || rotationNumber == "") {
		message = message + "Rotation number is required.\n";
		check = false;
	}
	if (rotationNumber != null && !checkIfAlphaNumeric(document.forms[0].rotationNumber)){
		message = message + "Invalid Format for Rotation Number.\n";
		check = false;
	}		
	if (from == null || from == "") {
		message = message + "Departure airport is required.\n";
		check = false;
	}else if (!isValidAirport(from)) {
		message = message + "Departure airport is either an invalid airport code or is not serviced by Delta Air Lines and its partners.\n";
		invalidCode ="invalidAirport";
		document.forms[0].fromAirport.focus();
		check = false;
	}
	if (to == null || to == "") {
		message = message + "Arrival airport is required.\n";
		check = false;
	}else if (!isValidAirport(to) && invalidCode.length<1) {
		message = message + "Arrival airport is either an invalid airport code or is not serviced by Delta Air Lines and its partners.\n ";
		document.forms[0].toAirport.focus();
		check =  false;
	}
	//kdl 20150716 QC 2249 start
	if (from.toUpperCase() == to.toUpperCase()) {
		message = message + "From and To airport code cannot be the same.\n";
		document.forms[0].toAirport.focus();
		check = false;
	}
	//kdl 20150716 QC 2249 end
	if (check) {
		//rqb 20120601 Dawgs QC 2250 start
		if(validateSearchDate(leaveDate)){
			document.forms[0].action = "companyTravelCrewTravelSearchCrew.action";
			document.forms[0].submit();
		} else {
			document.forms[0].leaveDate.focus();
		}
		//rqb 20120601 Dawgs QC 2250 end
	}else{
		alert(message);
	}

}

function showPayment(activeMenu) {
	var theTop = (screen.height / 2) - (265 / 2);
	var theLeft = (screen.width / 2) - (600 / 2);
	var features = 'height=' + 275 + ',width=' + 600 + ',top=' + theTop
			+ ',left=' + theLeft;
	if (activeMenu != ""){
		window.open("processAcceptTerms.action?activeMenu=" + activeMenu, "Activation", features);
	}else{
		window.open("processAcceptTerms.action", "Activation", features);
	}
}

function printFareRules() {
	var theTop = (screen.height / 2) - (600 / 2);
	var theLeft = (screen.width / 2) - (700 / 2);
	var features = 'height=' + 600 + ',width=' + 700 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=yes";
	window.open("printFareRules.action", "PrintFareRules", features);
}

function printWaitlist(print) {
	var firstSegment = document.getElementById("firstSegmentFlight");
	//var flight = firstSegment.value;
	var flight = null;
	var tempFlight = null;
	var flightNoObj = firstSegment;
	
	if (document.forms[0].flightNumberPopup.value != null
			&& document.forms[0].flightNumberPopup.value.indexOf("-") > 0){
		tempFlight = document.forms[0].flightNumberPopup.value.substring(0, document.forms[0].flightNumberPopup.value.indexOf("-"));
	}
	if ((document.forms[0].flightNumberPopup.value != null
			&& document.forms[0].flightNumberPopup.value > 1)
			||(tempFlight != null && tempFlight > 1)) {
		//flight = document.forms[0].flightNumberPopup.value;
		flightNoObj = document.forms[0].flightNumberPopup;
	}
	
	//mdp 20151028 mulancelotCodeScan Open Redirect 
	if (!checkIfNumericDash(flightNoObj)) {
		alert('Invalid flight number.');
		return;
	}
	flight = flightNoObj.value;
	
	var theTop = (screen.height / 2) - (350 / 2);
	var theLeft = (screen.width / 2) - (730 / 2);
	var date = new Date();
	var features = 'height=' + 350 + ',width=' + 720 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=yes";
	//window.open("printStandByList.do?flight=" + flight + "&print=" + print,	"Waitlist", features);
	//this should be modal because of session handling limitation
	window.showModalDialog("printStandByList.action?flight=" + flight + "&print=" + print,	"Waitlist", "dialogWidth:800px; scroll:yes");	
}

function activateAccountFee() {
	var selId = getRadioChecked(document.forms[0].relevantYear);
	if (selId != null && selId != "") {
		if (selId == 'N') {
			document.forms[0].relevantYear.value = 'N';
		} else {
			document.forms[0].relevantYear.value = 'C';
		}
	}else{
		alert("Select an activation period.");
		return;
	}
	document.forms[0].action = "myAccountActivationFeeProcess.action";
	document.forms[0].submit();
}

function activateAccount() {
	var selId = getRadioChecked(document.forms[0].relevantYear);
	if (selId != null && selId != "") {
		if (selId == 'N') {
			window.opener.document.forms[0].relevantYear.value = 'N';
			document.forms[0].activate.value = 'success';
		} else {
			window.opener.document.forms[0].relevantYear.value = 'C';
			document.forms[0].activate.value = 'success';
		}
	} else {
		window.opener.document.forms[0].relevantYear.value = 'C';
		document.forms[0].activate.value = 'success';
	}
	window.opener.document.forms[0].action = "myAccountActivationFeeProcess.action";
	window.opener.document.forms[0].submit();
	window.close();
}

function activateLater(activeMenu) {
	if( activeMenu == "oneGreatTeam" ){
		window.opener.document.forms[0].action = "oneGreatTeamSearch.action?activeMenu=oneGreatTeam&activateLater=true";
	}else if( activeMenu == "newDay" ){
		window.opener.document.forms[0].action = "newDaySearch.action?activeMenu=newDay&activateLater=true";
	}else if( activeMenu == "skyTeamSummerRewards" ){
		window.opener.document.forms[0].action = "skyTeamSummerRewardsSearch.action?activeMenu=skyTeamSummerRewards&activateLater=true";
	}else{
		window.opener.document.forms[0].action = "nonRevenueSearch.action";
	}
	window.opener.document.forms[0].submit();
	window.close();
}

function checkActivateAccount(activeMenu) {
	var activate = document.forms[0].activate.value;
	if (activate != 'success') {
		activateLater(activeMenu);
	}
}

function showReservation(confirmation, lstArrivalDate, lstAirport, lstArrivalTime, fromPage) {
	if (validateBookingForm(false)) {
		document.forms[0].lastArrivalDate.value = lstArrivalDate;
		document.forms[0].lastArrivalAirport.value = lstAirport;
		document.forms[0].lastArrivalTime.value = lstArrivalTime;
		document.forms[0].fromPage.value = fromPage;

		if (lstAirport != "" || lstArrivalDate != "" || lstArrivalTime != "") {
			var checker = isValidBoardingFlight(lstArrivalDate, lstAirport,
					lstArrivalTime);
			if (checker) {
				document.forms[0].action = "myReservationsCompanyReservationReview.action";
				document.forms[0].submit();
			}
		} else {
			document.forms[0].action = "myReservationsCompanyReservationReview.action";
			document.forms[0].submit();
		}
	}
}

function isValidBoardingFlight(lstArrDate, lstAir, lstArrTime) {
	var selOutId = getRadioChecked(document.forms[0].selectFlightOut);
	var selRetId = getRadioChecked(document.forms[0].selectFlightReturn);
	var lstDateTime = lstArrDate + " " + lstArrTime;

	if (selOutId != null && selOutId != "") {
		var outDepartObj = document.getElementById("outdepart" + selOutId);

		if (outDepartObj != null) {
			var outDepartAir = outDepartObj.value;
			var outDepartTime = trim(outDepartAir.substring(0,
					(outDepartAir.length) - 3));
			outDepartAir = trim(outDepartAir.substring(outDepartTime.length));
			if (lstAir != outDepartAir) {
				alert("Invalid boarding point for OutBound: origin:"
						+ outDepartAir + " should match last destination:"
						+ lstAir);
				return false;
			}
			var outDepartMillis = getDateTimeValue(outDepartTime);
			var lstDepartMillis = getDateTimeValue(lstDateTime);
			if (outDepartMillis < lstDepartMillis) {
				alert("Invalid boarding time for OutBound: last arrival is:"
						+ lstDateTime);
				return false;
			}
		}
	} else if ((selRetId != null && selRetId != "")
			&& (selOutId == null && selOutId == "")) {
		var retDepartObj = document.getElementById("retdepart" + selRetId);
		if (retDepartObj != null) {
			var retDepartAir = retDepartObj.value;
			var retDepartTime = trim(retDepartAir.substring(0,
					(retDepartAir.length) - 3));
			retDepartAir = trim(retDepartAir.substring(retDepartTime.length));
			if (lstAir != retDepartAir) {
				alert("Invalid boarding point for Return: origin:"
						+ retDepartAir + " should match last destination:"
						+ lstAir);
				return false;
			}
			var retDepartMillis = getDateTimeValue(retDepartTime);
			lstDepartMillis = getDateTimeValue(lstDateTime);
			if (retDepartMillis < lstDepartMillis) {
				alert("Invalid boarding time for Return: last arrival is:"
						+ lstDateTime);
				return false;
			}
		}
	}
	return true;
}

function submitReservationSearch(lastDate, lastTime, lastAirport, fromPage) {
	document.forms[0].lastArrivalDate.value = lastDate;
	document.forms[0].lastArrivalAirport.value = lastAirport;
	document.forms[0].lastArrivalTime.value = lastTime;
	document.forms[0].fromPage.value = fromPage;
	if (validateFlightSearchForm()) {
		checkSearchDates();
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751 
		document.forms[0].action += "?search=getflights";
		document.forms[0].submit();
	}
}

function tabCheckSearch(key_val) {
	if (event.keyCode == 9) {
		document.forms[0].fromAirport.focus();
	}
}
function tabCheckSearchChange(key_val) {
	if (event.keyCode == 9) {
		document.forms[0].viaAirport.focus();
	}
}
function tabCheckSearch2(key_val) {
	if (event.keyCode == 9) {
		document.forms[0].fromAirport.select();
	}
}
function tabCheckSearch3(key_val) {
	if (event.keyCode == 9) {
		document.forms[0].flightNumbers[0].focus();
	}
}
function submitSearch() {
	if (validateFlightSearchForm()) {
		//el Fix for QC 1260
		if (checkSearchDates()){		
			if(viaCheck(document.forms[0].searchType.value) ){
				var splashText = PLEASE_WAIT_TEXT; //aay 20150817 - QC 2751
				splashText += "<br><span class=\"smallText\">";
				splashText += "For round trip inquiries and for some international destinations";
				splashText += " this may take a few moments. Your patience is appreciated.";
				splashText += "</span>";
				showLoadingSplash(splashText);
				//dgg 20110530 Astros QC 837 start
				document.forms[0].action += "?search=getflights&travelWarningPresent=null";
				//dgg 20110530 Astros QC 837 end
				document.forms[0].submit();
			}
		}
		//el end
	}
}

//rqb 20120523 Dawgs QC 2250 start
function awardTravelSubmitSearch(fromPrevNext) {
	var validForm = false;
	if (fromPrevNext){
		validForm = true;
	}else{
		validForm = awardTravelValidateFlightSearchForm();
	}
	
	if (validForm){
		if(checkSearchDates()){
			/*rqb 20161026 DeltaSpirit3 */
			if(viaCheckForEAT()){
				var splashText = PLEASE_WAIT_TEXT; //aay 20150817 - QC 2751
				splashText += "<br><span class=\"smallText\">";
				splashText += "For round trip inquiries and for some international destinations";
				splashText += " this may take a few moments. Your patience is appreciated.";
				splashText += "</span>";
				showLoadingSplash(splashText);
				if (document.forms[0].action.indexOf("?search=getflights") == -1){
					document.forms[0].action += "?search=getflights";
				}			
				document.forms[0].submit();
			}		
		}		
	}
}
//rqb 20120523 Dawgs QC 2250 end

//mia fix for 1728 & 1729
function submitSearchPrevNext() {
	//if (validateFlightSearchForm()) {		
		if (checkSearchDates()){		
			if(viaCheck(document.forms[0].searchType.value) ){
				var splashText = PLEASE_WAIT_TEXT; //aay 20150817 - QC 2751
				splashText += "<br><span class=\"smallText\">";
				splashText += "For round trip inquiries and for some international destinations";
				splashText += " this may take a few moments. Your patience is appreciated.";
				splashText += "</span>";
				showLoadingSplash(splashText);
				document.forms[0].action += "?search=getflights";
				document.forms[0].submit();
			}		
		}
	//}
}
//mia end

//rqb 20101223 Astros QC 837 start
function searchAlert(){
	if (validateFlightSearchForm()) {
		//rqb 20120510 Dawgs QC 2004 start
		if (checkSearchDates()) {
		var activeMenu = document.forms[0].activeMenu.value;
		if(activeMenu == 'nonRevenue')
		{
			searchAlertPopup();
		}
		else
		{
			submitSearch();
		}
	}
		//rqb 20120510 Dawgs QC 2004 end
	}
}
//rqb 20101223 Astros QC 837 end

function flyConfirmedDiscountProgramSubmitSearch(){
	if (flyConfirmedDiscountProgramValidateFlightSearchForm()) {
		flyConfirmedDiscountProgramInsertWhiteSpaceAfterValidateFlightSearchForm();
		var splashText = PLEASE_WAIT_TEXT; //aay 20150817 - QC 2751
		splashText += "<br><span class=\"smallText\">";
		splashText += "For round trip inquiries and for some international destinations";
		splashText += " this may take a few moments. Your patience is appreciated.";
		splashText += "</span>";
		showLoadingSplash(splashText);
		document.forms[0].action += "?search=getflights";
		document.forms[0].submit();
	}
}

function changeDLListing(confirmationNumber) {
	//ei 20090930 -- commented out the comboTicket checking to allow the change listing of combo Tickets
/*	var comboTicket = document.forms[0].comboTicket;
	if( comboTicket != null && comboTicket.value == 'true' ){
		alert("The passenger type combination for this record locator is not " +
				"allowed for change listing at this time.  Please contact reservation sales at 800-221-1212 for assistance.");
		return;
	}*/
	var isMerged = document.getElementById("isMerged");
	if(isMerged != null && isMerged.value){
		alert("To Change This Listing, Call Reservations.");
	}else{
		if( confirmationNumber != null && confirmationNumber != '' ){
			document.forms[0].action = "nonRevenueChangeListing.action?confNumber=" + confirmationNumber;
		} else {
			document.forms[0].action = "nonRevenueChangeListing.action";
		}
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		document.forms[0].submit();
	}
}

function upgradeCobusItinerary( pnrNumber ) {
	if( pnrNumber != null && pnrNumber != "") {
		showLoadingSplash(PLEASE_WAIT_TEXT);
		document.forms[0].action = "companyReservationUpgradeItinerary.action?pnrNumber=" + pnrNumber;
		document.forms[0].submit();
	}
}

function changeCobusDLListing( pnrNumber ) {
	if( pnrNumber != null && pnrNumber != "") {
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		document.forms[0].action = "companyBusinessChangeListing.action?pnrNumber=" + pnrNumber;
		document.forms[0].submit();
	}
}


function showSplashForListings() {
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
}

function submitLink(link, splashText) {
	showLoadingSplash(splashText);
	location.href = link;
}

function initBuddyPassLink(link) {
	location.href = link;
}

function removeFlight(flightNumber, listId, reservation) {
	if(reservation != "cobus" && document.forms[0].flightNumber != null){
	document.forms[0].flightNumber.value = flightNumber;
	}
	
	if(reservation == "cobus" && document.forms[0].cobusFlightNumber != null){
		document.forms[0].cobusFlightNumber.value = flightNumber;
	}
	
	document.forms[0].listId.value = listId;
	
	if (reservation == "MyListings") {
		document.forms[0].action = "myReservationsCompanyRemoveFlight.action";
	} else if (reservation == "cobus") {
		document.forms[0].action = "companyBusinessRemoveFlight.action";
	} else if (reservation == "nonrev"){
		setInfantRequestDetails();// aay
		document.forms[0].action = "nonRevenueRemoveFlight.action";
	} else if (reservation == 'flyConfirmedForLess') {
		document.forms[0].action = "processBookingData.action?action=removeFlight";
	}
	
	document.forms[0].submit();
}

function addFlight(reservation, carrier) {
	if (reservation == "MyListings") {
		document.forms[0].action = "";
	} else if (reservation == "cobus") {
		document.forms[0].action = "";
	} else if (reservation == "nonrev") {
		document.forms[0].action = "";
	} else if (reservation == 'flyConfirmedForLess') {
		if(carrier == "DL"){
			setInfantRequestDetails();// aay
		}
		document.forms[0].action = "processBookingData.action?action=addFlight";
	}
	document.forms[0].submit();
}

function continueReservation(process, fromPage) {
	var isAwardTravel = false;
	var fromSearchReturn = false;
	var isBookingFormValid = false;
	
	if (process == "oneGreatTeam" || process == "newDay" || process == "skyTeamSummerRewards"){
		isAwardTravel = true;
	}

	if(fromPage == "searchReturn" || fromPage == "searchReturnViewPendingReservations"){
		fromSearchReturn = true;
	}
	
	if(fromPage != "searchReturnViewPendingReservations"){
		if(fromSearchReturn){
			isBookingFormValid = validateSearchReturnBookingForm();
		}else{
			isBookingFormValid = validateBookingForm(isAwardTravel);
		}		
	}else{
		isBookingFormValid = true;
	}
	
	if (isBookingFormValid) {
		if (fromPage == "useTicket") {
			document.forms[0].fromPage.value = "useTicket";
			document.forms[0].action = "myReservationsCompanyReservationReview.action";
		}else if(fromPage == "searchReturn"){
			showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
			if (process == "oneGreatTeam") {
				document.forms[0].action = "oneGreatTeamReview.action?action="+fromPage;
			} else if (process == "newDay") {
				document.forms[0].action = "newDayReview.action?action="+fromPage;
			} else if (process == "skyTeamSummerRewards") {
				document.forms[0].action = "skyTeamSummerRewardsReview.action?action="+fromPage;
			}			
		}else {
			if (isAwardTravel && fromPage == "searchReturnViewPendingReservations"){
				var outSelect = document.forms[0].selectFlightOut;
				var retSelect = document.forms[0].selectFlightReturn;
				removeCheck(outSelect);
				removeCheck(retSelect);
			}
			
			if (process == "nonRevenue") {
				document.forms[0].action = "nonRevenueReservationReview.action";
			} else if (process == "companyBusiness") {
				document.forms[0].action = "companyBusinessReservationReview.action";
			} else if (process == "flyConfirmedForLess") {
				document.forms[0].action = "flyConfirmedForLessReservationReview.action";
			} else if (process == "oneGreatTeam") {
				showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
				document.forms[0].action = "oneGreatTeamReview.action";
			} else if (process == "newDay") {
				showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
				document.forms[0].action = "newDayReview.action";
			} else if (process == "skyTeamSummerRewards") {
				showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
				document.forms[0].action = "skyTeamSummerRewardsReview.action";
			}
		}
		document.forms[0].submit();
	}
}

function flyConfirmedDiscountProgramContinueReservation(process, fromPage) {
	if (flyConfirmedDiscountProgramValidateBookingForm()) {
		if (fromPage == "useTicket") {
			document.forms[0].action = "myReservationsCompanyReservationReview.action";
		} else {
			/*
			if (process == "nonRevenue") {
				document.forms[0].action = "nonRevenueReservationReview.action";
			} else if (process == "companyBusiness") {
				document.forms[0].action = "companyBusinessReservationReview.action";
			} else if (process == "flyConfirmedForLess") {
			*/
				document.forms[0].action = "flyConfirmedForLessReservationReview.action";
			//}
		}
		document.forms[0].submit();
	}
}

function submitReservation() {
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
	document.forms[0].action = "companyBusinessReservationDetails.action";
	document.forms[0].submit();
}
/* NOT USED
function showCobusSecureFlight() {
	showLoadingSplash("Please wait while the system process your reservation.");
	document.forms[0].action = "companyBusinessSecureFlight.do";
	document.forms[0].submit();
}
*/
function submitListing() {
	if( showLoadingSplash(PLEASE_WAIT_TEXT)){ //aay 20150817 - QC 2751
		document.forms[0].action = "nonRevenueReservationDetails.action";
		document.forms[0].submit();
	}
}

function submitConfirmListing() {
	if( agreeCreditCardConfirm() ){
		if( showLoadingSplash(PLEASE_WAIT_TEXT)){ //aay 20150817 - QC 2751
			document.forms[0].action = "nonRevenueReservationDetails.action?status=confirm";
			document.forms[0].submit();
		}
	} else {
		alert( "You must agree in order to proceed");
	}
}

function validateSecureFlightForm(){
	var firstName = document.forms[0].newFirstName;
	var lastName = document.forms[0].newLastName;
	var midName = document.forms[0].newMiddleName;
	var gender = document.forms[0].gender;
	var birthday = document.forms[0].birthDate;
	var agreeTSAInfo = document.forms[0].agreeTSAInfo;
	var redressNbr = document.forms[0].redressNbr;
	//20150714 mp Lancelot QC-2798 START
	var knownTravelerNumber = document.forms[0].knownTravelerNumber;
	//20150714 mp Lancelot QC-2798 END
	
	if (firstName.length){
		for(var counter = 0; counter < firstName.length; counter++){
			if (firstName[counter].value == null || firstName[counter].value == ""){
				alert("First name is required.");
				firstName[counter].focus();
				return false;
			}
			if (lastName[counter].value == null || lastName[counter].value == ""){
				alert("Last name is required.");
				lastName[counter].focus();
				return false;
			}
			
			if (!checkIfAlphaValue(firstName[counter].value)){
				alert("First name should only contain alpha characters.");
				firstName[counter].focus();
				return false;
			}
			if (!(midName[counter].value == null || midName[counter].value == "") && !checkIfAlphaValue(midName[counter].value)){
				alert("Middle name should only contain alpha characters.");
				midName[counter].focus();
				return false;
			}
			if (!checkIfAlphaValue(lastName[counter].value)){
				alert("Last name should only contain alpha characters.");
				lastName[counter].focus();
				return false;
			}			
			
			if (gender[counter].value == null || gender[counter].value == ""){
				alert("Gender is required.");
				gender[counter].focus();
				return false;
			}
			if (birthday[counter].value == null || birthday[counter].value == ""){
				alert("Birthday is required.");
				birthday[counter].focus();
				return false;
			}
			if (!checkBirthDateFormat(birthday[counter], "Date of birth must be earlier than today.\n Please enter a valid date of birth.", false)){
				birthday[counter].focus();
				return false;
			}
			//20150714 mp Lancelot QC-2798 check for alphanumeric only excluding space START
			if(!(checkIfAlphaNumericValueOnly(redressNbr[counter].value))) {
				alert("Redress Number should only contain alphanumeric characters.");
				redressNbr[counter].focus();
				return false;
			}else{
				if(!(redressNbr[counter].value == null || redressNbr[counter].value == "") && (redressNbr[counter].value.length > 13)){
					alert("Redress number should have a maximum of 13 characters.");
					redressNbr[counter].focus();
					return false;				
				}
			}
			if(!(checkIfAlphaNumericValueOnly(knownTravelerNumber[counter].value))) {
				alert("Known Traveler Id should only contain alphanumeric characters.");
				knownTravelerNumber[counter].focus();
				return false;
			}
			//20150714 mp Lancelot QC-2798 check for alphanumeric only excluding space END
		}	
	} else {
		if (firstName.value == null || firstName.value == ""){
			alert("First name is required.");
			firstName.focus();
			return false;
		}
		if (lastName.value == null || lastName.value == ""){
			alert("Last name is required.");
			lastName.focus();
			return false;
		}
		if (!checkIfAlphaValue(firstName.value)){
			alert("First name should only contain alpha characters.");
			firstName.focus();
			return false;
		}
		if (!(midName.value == null || midName.value == "") && !checkIfAlphaValue(midName.value)){
			alert("Middle name should only contain alpha characters.");
			midName.focus();
			return false;
		}
		if (!checkIfAlphaValue(lastName.value)){
			alert("Last name should only contain alpha characters.");
			lastName.focus();
			return false;
		}				
		if (gender.value == null || gender.value == ""){
			alert("Gender is required.");
			gender.focus();
			return false;
		}
		if (birthday.value == null || birthday.value == ""){
			alert("Birthday is required.");
			birthday.focus();
			return false;
		}
		if (!checkBirthDateFormat(birthday, "Date of birth must be earlier than today.\n Please enter a valid date of birth.", false)){
			birthday.focus();
			return false;
		}
		//20150714 mp Lancelot QC-2798 check for alphanumeric only excluding space START
		if(!(checkIfAlphaNumericValueOnly(redressNbr.value))) {
			alert("Redress Number should only contain alphanumeric characters.");
			redressNbr.focus();
			return false;
		}else{
			if(!(redressNbr.value == null || redressNbr.value == "") &&(redressNbr.value.length > 13)){
				alert("Redress number should have a maximum of 13 characters.");
				redressNbr.focus();
				return false;				
			}
		}
		if(!(checkIfAlphaNumericValueOnly(knownTravelerNumber.value))) {
			alert("Known Traveler Id should only contain alphanumeric characters.");
			knownTravelerNumber.focus();
			return false;
		}
		//20150714 mp Lancelot QC-2798 check for alphanumeric only excluding space END		
	}
	
	if (!agreeTSAInfo.checked){
		alert( "You must agree in order to proceed");
		agreeTSAInfo.focus;
		return false;
	}
	
	return true;
}

function submitNonrevReservation() {
	if( showLoadingSplash(PLEASE_WAIT_TEXT)){ //aay 20150817 - QC 2751
		document.forms[0].submit();
	}
	
}

function submitFamilyFaresReservation() {
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
	//document.forms[0].action = "flyConfirmedForLessBookFlight.action";
	document.forms[0].submit();
}
/* rqb 20140904 NOT USED
function showFlightLoad(listId, source, activeMenu) {
	showLoadingSplash("Please wait while the system retrieves the Standby Lists.");
	window.showModalDialog("showFlightLoad.do?temp=temp&listId=" + listId
			+ "&source=" + source + "&activeMenuForStandbyList=" + activeMenu, window,
			"dialogWidth:720px; scroll:yes; resizable:yes;");
	unhideAllSelectElement();
}
*/
/* rqb 20140904 NOT USED
function showFlightLoad2(search,listId, source, activeMenu) {
	showLoadingSplash("Please wait while the system retrieves the Standby Lists.");
	window.showModalDialog("showFlightLoad.do?temp=temp&listId=" + listId
			+ "&source=" + source + "&activeMenuForStandbyList=" + activeMenu
			+"&search="+search, window,
			"dialogWidth:720px; scroll:yes; resizable:yes;");
	unhideAllSelectElement();
}
*/
function showFlightInformationPopup(departureAirport, arrivalAirport, flightNumber, departureMonth, departureDate, depDate){
	var stringUrl;
	stringUrl = "showDLFlightInformationDetails.action?departureAirport="+departureAirport+"&arrivalAirport="+arrivalAirport+"&flightNumber="+flightNumber
	+"&departureDay="+departureMonth+"&departureDate="+departureDate;
	//mia 20100826 fix for centering popups start
	var theTop = (screen.height / 2) - (350 / 2);
	var theLeft = (screen.width / 2) - (730 / 2);
	var features = 'height=' + 350 + 'px; width=' + 730 + 'px; top=' + theTop
			+ 'px; left=' + theLeft + "px";	

	window.open(stringUrl, "FlightInformation", features );
	//mia fix for centering popups end
}

function showFlightInformationPopup2(departureAirport, arrivalAirport, flightNumber, departureMonth, departureDate, depDate, carrierName, isCodeShare, isConnectionCarrier){
	var stringUrl;
	stringUrl = "showDLFlightInformationDetails.action?departureAirport="+departureAirport+"&arrivalAirport="+arrivalAirport+"&flightNumber="+flightNumber
	+"&departureDay="+departureMonth+"&departureDate="+departureDate+"&carrierName="+carrierName+"&isCodeShare="+isCodeShare+"&isConnectionCarrier="+isConnectionCarrier;
	//mia 20100826 fix for centering popups start
	var theTop = (screen.height / 2) - (350 / 2);
	var theLeft = (screen.width / 2) - (730 / 2);
	var features = 'height=' + 350 + 'px; width=' + 730 + 'px; top=' + theTop
	+ 'px; left=' + theLeft + "px";	
	window.open(stringUrl, "FlightInformation", features );
	//mia fix for centering popups end
}

function showPrintResults(source) {
	var newDate = new Date();
	var activeMenu = document.forms[0].activeMenu.value;
	window.showModalDialog("printResults.action?source=" + source + "&activeMenu="
			+ activeMenu + "&date=" + newDate, "printResults",
			"dialogWidth:900px");
}

function flyConfirmedDiscountProgramShowPrintResults(selectedIndex) {
	var newDate = new Date();
	var activeMenu = document.forms[0].activeMenu.value;
	window.showModalDialog("printSearchResults.action?selectedIndex=" + selectedIndex + "&activeMenu="
			+ activeMenu + "&date=" + newDate, "printResults",
			"dialogWidth:900px");
}

function showPrintPassCharges() {
	window.showModalDialog("myAccountPassCharges.action?event=print",
			"printPassCharges", "dialogWidth:850px");
}

//ejs 0908  added print for imputed income
function showPrintImputedIncome() {
	window.showModalDialog("myAccountImputedIncome.action?event=print",
			"printImputedIncome", "dialogWidth:850px");
}


function showPrintTravelHistory() {
	window.showModalDialog("myAccountTravelHistory.action?event=print",
			"printTravelHistory", "dialogWidth:850px");
}

function showBookingConfirmation(changeListingText, ticketRevaled) {
	var date= new Date(); // don't remove, this is important.
	if(changeListingText != null){		
		//rqb 20110701 - QC 1800 - handle passing of reval indicator
		if (ticketRevaled != null){
			window.showModalDialog("printBookingConfirmation.action?changeListingText="+changeListingText+"&ticketRevaled="+ticketRevaled ,
					"Booking Confirmation", "dialogWidth:1000px;dialogHeight:600px");
		}else{
		window.showModalDialog("printBookingConfirmation.action?changeListingText="+changeListingText ,
			"Booking Confirmation", "dialogWidth:1000px;dialogHeight:600px");
		}
	}else{		
		window.showModalDialog("printBookingConfirmation.action?changeListingText=reservation",
				"Booking Confirmation", "dialogWidth:1000px;dialogHeight:600px");
	}
}

//nmb 201205 - Dawgs Calculators start
function printCalculatorQuote() {
	window.showModalDialog("printCalculatorQuote.action",
				"PrintCalculatorQuote", "dialogWidth:1000px;dialogHeight:600px");
}
//nmb 201205 - Dawgs Calculators end

function showPrintCrewTravelConfirmation() {
	var date= new Date(); // don't remove, this is important.
	window.showModalDialog("printCrewTravelConfirmation.action",
			"PrintCrewTravelConfirmation", "dialogWidth:1000px;dialogHeight:600px");
}
function printCancelletionConfirmation(cancelStatus) {
	var date= new Date(); // don't remove, this is important.
	window.showModalDialog("printCancelletionConfirmation.action?cancelStatus="+cancelStatus,
			"Cancelletion Confirmation", "dialogWidth:950px;dialogHeight:600px");
}

function printEATCancelletionConfirmation(cardType, cardNumber) {
	var date= new Date(); // don't remove, this is important.
	window.showModalDialog("printCancelletionConfirmation.action?creditCardType="+cardType+"&creditCardNumber="+cardNumber,
			"Cancelletion Confirmation", "dialogWidth:950px;dialogHeight:600px");
}

function printAwardTravel() {
	window.showModalDialog("printAwardTravel.action", "Award Travel",
			"dialogWidth:750px;dialogHeight:550px");
}

function emailResults(source) {
	var activeMenu = document.forms[0].activeMenu.value;
	var bookingType ="";
	var retVal = showEmailPopUp(activeMenu, source, '');
	if(retVal != null){
		showEmailResponsePopUp(retVal, bookingType);	
	}
}

function printRefundConfirmation(){
	window.showModalDialog("printRefundConfirmation.action", "Refund Confirmation",
	"dialogWidth:750px;dialogHeight:550px");
}

function showEmailPopUp(activeMenu, source, bookingType){	
	var retVal = "";	
	if(bookingType.length<1 && source.length >1){
		retVal = window.showModalDialog("emailResults.action?source=" + source + "&activeMenu="
			+ activeMenu, "emailResults",
			"dialogWidth:700px;dialogHeight:460px");
	}else{
		retVal = window.showModalDialog("emailBooking.action?bookingType=" + bookingType
				+ "&activeMenu=" + activeMenu, "emailBookingConfirmation",
				"dialogWidth:700px;dialogHeight:460px");
	}
	
	return retVal;
}

function showEmailResponsePopUp(retVal, bookingType){
	if(bookingType.length<1){
		window.showModalDialog(retVal, "emailResults",
				"dialogWidth:500px;dialogHeight:340px");
	}else if(bookingType == 'crew'){
		window.showModalDialog(retVal, "emailCrewListing",
		"dialogWidth:500px;dialogHeight:340px");
	}else if(bookingType == 'cancel'){
		window.showModalDialog(retVal, "emailCancel",
		"dialogWidth:500px;dialogHeight:340px");
	}else if(bookingType == 'fcfl'){
		window.showModalDialog(retVal, "emailFCFL",
		"dialogWidth:700px;dialogHeight:460px");
	}else if(bookingType == 'refund'){
		window.showModalDialog(retVal, "emailRefund",
		"dialogWidth:500px;dialogHeight:340px");
	}else if(bookingType == 'calculator'){
		window.showModalDialog(retVal, "emailCalculatorQuote",
		"dialogWidth:500px;dialogHeight:340px");
	}else{
		window.showModalDialog(retVal, "emailBookingConfirmation",
					"dialogWidth:500px;dialogHeight:340px");
	}
}

function emailBookingConfirmationCheck(bookingType, activeMenu) {
	var source= "";
	var retVal = showEmailPopUp(activeMenu, '', bookingType);
	if(retVal != null){
	showEmailResponsePopUp(retVal, bookingType);
}

}

function emailCrewListing(recordLocator, rotation)	{	
	var retVal = window.showModalDialog("emailCrewListing.action?recordLocator=" + recordLocator
				+ "&rotation=" + rotation, "emailCrewListing",
				"dialogWidth:700px;dialogHeight:460px");	
	if(retVal != null){
		showEmailResponsePopUp(retVal, 'crew');
	}	
}

function emailCancel(activeMenu)	{	
	var retVal = window.showModalDialog("emailCancel.action?activeMenu=" + activeMenu,
				 "emailCancel",
				 "dialogWidth:700px;dialogHeight:460px");	
	if(retVal != null){
		showEmailResponsePopUp(retVal, 'cancel');
	}	
}

function emailRefund(){
	var retVal = window.showModalDialog("emailRefund.action",
			 "emailRefund",
			 "dialogWidth:700px;dialogHeight:460px");
	if(retVal != null){
		showEmailResponsePopUp(retVal, 'refund');
	}	
}

function sendRefundEmail(){
	var email = document.forms[0].emailAddress.value;
	var senderEmailAddress = document.forms[0].senderEmailAddress.value;
	var errorMessage = "";
	var comment = document.forms[0].comment.value;	
	var rememberRecipient = document.forms[0].rememberRecipient.checked;
	var rememberSender =  document.forms[0].rememberSender.checked;
	var invalidEmail = false;
	if(rememberRecipient){
		rememberRecipient = 'on';
	}else{
		rememberRecipient = 'off';
	}
	if(rememberSender){
		rememberSender = 'on';
	}else{
		rememberSender = 'off';
	}
	
	if (checkNull(email)) {
		errorMessage += "Recipient email is required.\n";
		document.forms[0].emailAddress.focus();
	} else if (!validateEmailAddress(email)) {	
		invalidEmail = true;
		document.forms[0].emailAddress.focus();
	}
	
	if (checkNull(senderEmailAddress)) {
		errorMessage += "Sender Email is required.\n";
		document.forms[0].senderEmailAddress.focus();
	} else if (!validateEmailAddress2(senderEmailAddress)) {
		errorMessage += "Please enter a single valid sender email address.\n";
		document.forms[0].senderEmailAddress.focus();
	}	
	
	if (errorMessage.length < 1 && invalidEmail==false ) {
		window.returnValue = "sendEmailRefund.action?emailAddress="+email+"&senderEmailAddress="+senderEmailAddress+"&comment="+comment+
			"&rememberRecipient="+rememberRecipient+"&rememberSender="+rememberSender;			
		window.close();
	}else if(errorMessage.length > 1 || (invalidEmail==false && errorMessage.length > 1)){
		alert(errorMessage);
	}
}

function emailReceipt()	{	
	var retVal = window.showModalDialog("myReservationsEmailPage.action",
				 "emailReceipt",
				 "dialogWidth:700px;dialogHeight:460px;scroll:off");	
	if(retVal != null){
		showEmailResponsePopUp(retVal, 'fcfl');
	}	
}
function sendCrewEmail() {
	
	var email = document.forms[0].emailAddress.value;
	var senderEmailAddress = document.forms[0].senderEmailAddress.value;
	var errorMessage = "";
	var comment = document.forms[0].comment.value;	
	var rememberRecipient = document.forms[0].rememberRecipient.checked;
	var rememberSender =  document.forms[0].rememberSender.checked;
	var invalidEmail = false;
	if(rememberRecipient){
		rememberRecipient = 'on';
	}else{
		rememberRecipient = 'off';
	}
	if(rememberSender){
		rememberSender = 'on';
	}else{
		rememberSender = 'off';
	}
	
	if (checkNull(email)) {
		errorMessage += "Recipient email is required.\n";
		document.forms[0].emailAddress.focus();
	} else if (!validateEmailAddress(email)) {	
		invalidEmail = true;
		document.forms[0].emailAddress.focus();
	}
	
	if (checkNull(senderEmailAddress)) {
		errorMessage += "Sender Email is required.\n";
		document.forms[0].senderEmailAddress.focus();
	} else if (!validateEmailAddress2(senderEmailAddress)) {
		errorMessage += "Please enter a single valid sender email address.\n";
		document.forms[0].senderEmailAddress.focus();
	}	
	
	if (errorMessage.length < 1 && invalidEmail==false ) {
		window.returnValue = "sendEmailCrewListings.action?emailAddress="+email+"&senderEmailAddress="+senderEmailAddress+"&comment="+comment+
			"&rememberRecipient="+rememberRecipient+"&rememberSender="+rememberSender;			
		window.close();
	}else if(errorMessage.length > 1 || (invalidEmail==false && errorMessage.length > 1)){
		alert(errorMessage);
	}
}

function sendCancelEmail(activeMenu) {
	
	var email = document.forms[0].emailAddress.value;
	var senderEmailAddress = document.forms[0].senderEmailAddress.value;
	var errorMessage = "";
	var comment = document.forms[0].comment.value;	
	var rememberRecipient = document.forms[0].rememberRecipient.checked;
	var rememberSender =  document.forms[0].rememberSender.checked;
	var invalidEmail = false;
	if(rememberRecipient){
		rememberRecipient = 'on';
	}else{
		rememberRecipient = 'off';
	}
	if(rememberSender){
		rememberSender = 'on';
	}else{
		rememberSender = 'off';
	}
	
	if (checkNull(email)) {
		errorMessage += "Recipient email is required.\n";
		document.forms[0].emailAddress.focus();
	} else if (!validateEmailAddress(email)) {	
		invalidEmail = true;
		document.forms[0].emailAddress.focus();
	}
	
	if (checkNull(senderEmailAddress)) {
		errorMessage += "Sender Email is required.\n";
		document.forms[0].senderEmailAddress.focus();
	} else if (!validateEmailAddress2(senderEmailAddress)) {
		errorMessage += "Please enter a single valid sender email address.\n";
		document.forms[0].senderEmailAddress.focus();
	}	
	
	if (errorMessage.length < 1 && invalidEmail == false) {
		window.returnValue = "sendCancelEmail.action?emailAddress="+email+"&senderEmailAddress="+senderEmailAddress+"&comment="+comment+
			"&rememberRecipient="+rememberRecipient+"&rememberSender="+rememberSender+"&activeMenu=" + activeMenu;			
		window.close();
	}else if (errorMessage.length > 1 || (invalidEmail==false && errorMessage.length > 1)){
		alert(errorMessage);
	}
}

function emailBookingConfirmation() {
	window.showModalDialog("emailBooking.action", "emailBookingConfirmation",
			"dialogWidth:500px;dialogHeight:150px");
}
/* rqb 20140805 NOT USED
function showFareRules(flyConfirmed) {
	//var url = "fareRules.do?flightNum=" + flightNum
	//+ "&dptAirport=" + dptAirport + "&arrAirport=" + arrAirport
	//+ "&dptDate=" + dptDate;
	
	var url = "fareRules.action?flyConfirmed=" + flyConfirmed;
	window.showModalDialog(url, "fareRules",
			"dialogWidth:700px;dialogHeight:600px");
}
*/
var prevRowOutObj;
var prevRowRetObj;
var highlightColor = "#ffffcc";
var defaultColor = "#ffffff";

function highLightOutRow(rowId) {

	rowObj = document.getElementById(rowId);

	if (rowObj != null) {
		if (prevRowOutObj != null) {
			prevRowOutObj.style.backgroundColor = defaultColor;
		}
		prevRowOutObj = rowObj;
		prevShadeColor = highlightColor;
		rowObj.style.backgroundColor = highlightColor;
	}
}

function highLightRetRow(rowId) {

	rowObj = document.getElementById(rowId);

	if (rowObj != null) {
		if (prevRowRetObj != null) {
			prevRowRetObj.style.backgroundColor = defaultColor;
		}
		prevRowRetObj = rowObj;
		prevShadeColor = highlightColor;
		rowObj.style.backgroundColor = highlightColor;
	}
}

var prevShadeRow;
var prevShadeColor;
var shadeColor = "#eeeeff";

function shadeRow(rowObj) {
	if (rowObj.style.backgroundColor != highlightColor) {
		prevShadeRow = rowObj;
		prevShadeColor = rowObj.style.backgroundColor;
		rowObj.style.backgroundColor = shadeColor;
	}
}

function unShadeRow(rowObj) {
	if (prevShadeRow != null
			&& prevShadeRow.style.backgroundColor != highlightColor) {
		prevShadeRow.style.backgroundColor = prevShadeColor;
	}
}

function selectFlight(flight, direct) {
	if (flight != null && direct == "out") {
		document.forms[0].selectedFlightOut.value = flight;
	}
	if (flight != null && direct == "return") {
		document.forms[0].selectedFlightReturn.value = flight;
	}
}

function showLoadingSplash(splashText) {
	if(setupSplash(splashText)){
		return true;
	}
	return false;
}

function setupSplash(splashText){
	var loadSplash = document.getElementById("loadingSplash");
	var innerText = "<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>";
	innerText += "<div class=\"splashText\">";
	if (splashText != null && splashText != "") {
		innerText += splashText;
	} else {
		innerText += PLEASE_WAIT_TEXT; //aay 20150817 - QC 2751
	}
	innerText += "</div>";
	loadSplash.innerHTML = innerText;

	hideAllSelectElement();
	document.getElementById("topAnchor").focus();
	loadSplash.style.visibility = "visible";
	return true;
}

function showLoadingSplash2() {
	if(setupSplash2()){
		return true;
	}
	return false;
}

function setupSplash2(){
	var loadSplash2 = document.getElementById("loadingSplash");
	var innerText2 = "<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>";

	innerText2 += "<span class=\"splashText\">";
	innerText2 += "<img src=\"images/search_splash_message.gif\"/>";
	innerText2 += "</span>";
		
	loadSplash2.innerHTML = innerText2;

	hideAllSelectElement();
	document.getElementById("topAnchor").focus();
	loadSplash2.style.visibility = "visible";
	return true;
}


function hideLoadingSplash(){
	var loadSplash = document.getElementById("loadingSplash");
	loadSplash.innerHTML = '';
	hideElement("loadingSplash");
}

var sessionCheckCount = 0;
var submitCount = 0;
var sessionAlive = true;
function checkSessionStatus(actionString){
	var sessionCheckFrame = document.getElementById('sessionCheckFrame');

	
	try{
		if(sessionCheckCount < 5){
			sessionCheckCount++;
			sessionCheckFrame.contentWindow.location.reload(true);
			setTimeout('checkSessionFrame()', 1000);
		}
	} catch (e){//will error when app is run locally and delta passport is on but has session time out
		sessionAlive = false;
	}
	
	if(!sessionAlive && submitCount < 1) {
		submitCount++;
		document.forms[0].action = actionString;
		document.forms[0].submit();
	}			
	
}

function checkSessionFrame(){
	var sessionCheckFrame = document.getElementById('sessionCheckFrame');
	if(sessionCheckFrame.readyState == 'complete'){
		sessionCheckCount=0;
		if(sessionCheckFrame.contentWindow.document){
			var sessionStatus = sessionCheckFrame.contentWindow.document.getElementById('sessionStatus');
			if(sessionStatus && 'OK' == sessionStatus.innerHTML ){
				//make sure top of screen shows up 
				window.scroll(0,0);
			} else {
				sessionAlive = false;
			}
		}
	}	
}

window.onscroll = offsetLoadingSplash;
function offsetLoadingSplash() {
	var loadSplash = document.getElementById("loadingSplash");
	scrollSplash(loadSplash);
	var popupSplash = document.getElementById("popupSplash");
	scrollSplash(popupSplash);
}

function scrollSplash(splash){
	// offset only when visible because this interferes with display of
	// drop-down objects 
	if (splash) {
		var loadSplashVisibility = splash.style.visibility;
		if (loadSplashVisibility) {
			if (loadSplashVisibility == "visible") {
				splash.style.top = getViewportScrollY();
				splash.style.left = getViewportScrollX();
			}
		}
	}
}

function hideElement(elementId) {
	var obj = document.getElementById(elementId);
	if (obj != null) {
		obj.style.visibility = "hidden";
	}
	return obj;
}

function showElement(elementId) {
	var obj = document.getElementById(elementId);
	if (obj != null) {
		obj.style.visibility = "visible";
	}
	return obj;
}

function hideAllSelectElement() {
	var selectNodes = document.getElementsByTagName("select");
	for (i = 0; i < selectNodes.length; i++) {
		if("airportSelect" != selectNodes[i].name && "City_codes" != selectNodes[i].name && "" != selectNodes[i].name ){
			selectNodes[i].style.visibility = "hidden";
		}
	}
}

function hideAllSelectElement2() {
	var selectNodes = document.getElementsByTagName("select");
	for (i = 0; i < selectNodes.length; i++) {
		if("City_codes" != selectNodes[i].name && "" != selectNodes[i].name ){
			selectNodes[i].style.visibility = "hidden";
		}
	}
}

function unhideAllSelectElement(){
	var selectNodes = document.getElementsByTagName("select");
	for (i = 0; i < selectNodes.length; i++) {
		//hide everything except for the airport list - should remain hidden
		if("airportSelect" != selectNodes[i].name && "City_codes" != selectNodes[i].name && "" != selectNodes[i].name ){
			selectNodes[i].style.visibility = "visible";
		}
	} 
}

function unhideAllSelectElement2(){
	var selectNodes = document.getElementsByTagName("select");
	for (i = 0; i < selectNodes.length; i++) {
		//hide everything except for the airport list - should remain hidden
		if("City_codes" != selectNodes[i].name && "" != selectNodes[i].name ){
			selectNodes[i].style.visibility = "visible";
		}
	} 
}

function hideMenuOverlapSelect(hide) {
	var selectNodes = document.getElementsByTagName("select");
	for (i = 0; i < selectNodes.length; i++) {
		if (isOverlapSelect(selectNodes[i])) {
			if (hide) {
				selectNodes[i].style.visibility = "hidden";
			} else {
				var loadSplash = document.getElementById("loadingSplash");
				if(loadSplash != null && loadSplash.style.visibility != "visible"){
					selectNodes[i].style.visibility = "visible";
				}
			}
		}
	}
}

function isOverlapSelect(selectObj) {
	// add the name of select box here if its display is being affected by the
	// menu
	if (selectObj != null) {
		if (selectObj.name == "creditCardType") {
			return true;
		}
		if (selectObj.name == "expirationMonth") {
			return true;
		}
		if (selectObj.name == "expirationYear") {
			return true;
		}
		if (selectObj.name == "carrierCode") {
			return true;
		}
		if (selectObj.name == "flightCarrierCode") {
			return true;
		}
		if (selectObj.name == "ddlBillingCountry") {
			return true;
		}
		if (selectObj.name == "leaveTime") {
			return true;
		}
		if (selectObj.name == "returnTime") {
			return true;
		}
	}
	return false;
}

function setSelectHidden(selectObj) {
	if (selectObj != null) {
		if (selectObj.style.visibility != "hidden") {
			selectObj.style.visibility = "hidden";
		}
	}
}

function reverseRoute() {
	var fromSelObj = document.forms[0].fromAirport;
	var toSelObj = document.forms[0].toAirport;
	var fromAir = fromSelObj.value;
	var toAir = toSelObj.value;
	fromSelObj.value = toAir;
	toSelObj.value = fromAir;
}

function flightReverseRoute() {
	var fromSelObj = document.forms[0].flightFromAirport;
	var toSelObj = document.forms[0].flightToAirport;
	var fromAir = fromSelObj.value;
	var toAir = toSelObj.value;
	fromSelObj.value = toAir;
	toSelObj.value = fromAir;
}

var airportTarget;

function popupAirportList(inTarget, event) {
	airportTarget = document.getElementById(inTarget);
	var airListObj = document.getElementById("airportList");
	if (airListObj != null) {
		airListObj.style.left = event.clientX + "px";
		airListObj.style.top =  event.clientY + "px";			
		airListObj.style.visibility = "visible";
	}
	var selObj = document.getElementById("airportSelect");
	if (selObj != null) {
		if (airportTarget != null) {
			selObj.value = airportTarget.value;
		} else {
			selObj.value = "";
		}

		selObj.focus();
	}
}

function selectAirport() {
	var selObj = document.getElementById("airportSelect");
	if (airportTarget != null && selObj != null) {
		airportTarget.value = selObj.value;
	}
	hideElement("airportList");
}

function clearAll() {
	document.forms[0].fromAirport.value = "";
	document.forms[0].toAirport.value = "";
	document.forms[0].leaveDate.value = getDateAsString(new Date());
	document.forms[0].flightFromAirport.value = "";
	document.forms[0].flightToAirport.value = "";
	document.forms[0].flightLeaveDate.value = getDateAsString(new Date());
	document.forms[0].leaveTime.selectedIndex = 0;
	document.forms[0].returnDate.value = getDateAsString(new Date());
	document.forms[0].returnTime.selectedIndex = 0;
	document.forms[0].flightNumber.value = "";
	document.forms[0].action += "?search=clear";
	showLoadingSplash("Clearing Search values");
	document.forms[0].submit();

	/*
	 * var resultsObj = document.getElementById( "results" );
	 * //resultsObj.style.visibility = "hidden"; resultsObj.style.display =
	 * "none";
	 * 
	 */
}

function flyConfirmedDiscountProgramClearAll() {
	var searchForm = document.forms[0];
	
	for(var counter = 0; counter < searchForm.flightNumbers.length; counter++ ){
		searchForm.flightNumbers[counter].value = "";
		searchForm.fromAirports[counter].value = "";
		searchForm.toAirports[counter].value = "";
		searchForm.leaveDates[counter].value = getDateAsString(new Date());
		searchForm.leaveTimes[counter].selectedIndex = 0;
	}

	searchForm.action += "?search=clear";
	showLoadingSplash("Clearing Search values");
	searchForm.submit();

	/*
	 * var resultsObj = document.getElementById( "results" );
	 * //resultsObj.style.visibility = "hidden"; resultsObj.style.display =
	 * "none";
	 * 
	 */
}

function clearAll2() {
	/* rqb 20161026 DeltaSpirit3 */
	document.forms[0].outboundFrom.value = "";
	document.forms[0].outboundTo.value = "";
	document.forms[0].outboundVia.value="";
	document.forms[0].returnFrom.value = "";
	document.forms[0].returnTo.value = "";
	document.forms[0].returnVia.value="";
	document.forms[0].leaveDate.value = getDateAsString(new Date());
	document.forms[0].leaveTime.selectedIndex = 0;
	document.forms[0].returnDate.value = getDateAsString(new Date());
	document.forms[0].returnTime.selectedIndex = 0;
	document.forms[0].action += "?search=clear";
	showLoadingSplash("Clearing Search values");
	document.forms[0].submit();
}

function selectAllRows(checkObj, checkRowName) {
	var allInputObj = document.getElementsByTagName("input");
	for (i = 0; i < allInputObj.length; i++) {
		if (allInputObj[i].type == "checkbox"
				&& allInputObj[i].name == checkRowName) {
			if (checkObj.checked) {
				if (allInputObj[i].disabled == false) {
					allInputObj[i].checked = true;
				}
			} else {
				allInputObj[i].checked = false;
			}
		}
	}
}

function isDigit (c) {
    return ((c >= "0") && (c <= "9"));
}

function isNumeric(s)
{
	var i;
	
	for (i = 0; i < s.length; i++) {   
        var c = s.charAt(i);
        if (!isDigit(c)) {
            return false;
        }
    }  
    return true;	
}

function validateFlightSearchForm() {
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}
	var searchType = searchForm.searchType.value;

	if (searchType == 'flight'){
		var flightNumber = searchForm.flightNumber.value;
		if (flightNumber == "" || flightNumber == null){
			alert("Please enter a Flight Number.");
			searchForm.flightNumber.focus();
			return false;
		}else if(flightNumber != null && !isNumeric(flightNumber)){
			alert("Invalid Format for Flight Number.");
			searchForm.flightNumber.focus();
			return false;
		}
		var flightFromAirportCode = searchForm.flightFromAirport.value;
		if (flightFromAirportCode == "" || flightFromAirportCode == null) {
			alert("Please enter or select origin airport");
			searchForm.flightFromAirport.focus();
			return false;
		} else if (!isValidAirport(flightFromAirportCode)) {
			alert("Please enter a valid airport code.");
			searchForm.flightFromAirport.focus();
			return false;
		}
		var flightToAirportCode = searchForm.flightToAirport.value;
		if (flightToAirportCode == "" || flightToAirportCode == null) {
			alert("Please enter or select destination airport");
			searchForm.flightToAirport.focus();
			return false;
		} else if (!isValidAirport(flightToAirportCode)) {
			alert("Please enter a valid airport code.");
			searchForm.flightToAirport.focus();
			return false;
		}
		//20150609 jm QC 2249 start
		if (flightFromAirportCode.toUpperCase() == flightToAirportCode.toUpperCase()) {
			alert("From, To and Via airport codes cannot be the same.");
			searchForm.flightToAirport.focus();
			return false;
		}
		//20150609 jm QC 2249 ends
	}else {
		var fromAirportCode = searchForm.fromAirport.value;
		if (fromAirportCode == "" || fromAirportCode == null) {
			alert("Please enter or select origin airport");
			searchForm.fromAirport.focus();
			return false;
		} else if (!isValidAirport(fromAirportCode)) {
			alert("Please enter a valid airport code.");
			searchForm.fromAirport.focus();
			return false;
		}
		var toAirportCode = searchForm.toAirport.value;
		if (toAirportCode == "" || toAirportCode == null) {
			alert("Please enter or select destination airport");
			searchForm.toAirport.focus();
			return false;
		} else if (!isValidAirport(toAirportCode)) {
			alert("Please enter a valid airport code.");
			searchForm.toAirport.focus();
			return false;
		}

		var viaAirportCode = searchForm.viaAirport.value;
		if (viaAirportCode != "" && viaAirportCode != null) {
			if (!isValidAirport(viaAirportCode)){
				alert("Please enter a valid airport code.");
				searchForm.viaAirport.focus();
				return false;
			}
			//20150609 kdl QC 2249 start
			if (viaAirportCode.toUpperCase() == fromAirportCode.toUpperCase() || viaAirportCode.toUpperCase() == toAirportCode.toUpperCase()) {
				alert("From, To and Via airport codes cannot be the same.");
				searchForm.viaAirport.focus();
				return false;
			}
			//20150609 kdl QC 2249 end
		}
		
		//20150609 kdl QC 2249 start
		if (fromAirportCode.toUpperCase() == toAirportCode.toUpperCase()) {
			alert("From, To and Via airport codes cannot be the same.");
			searchForm.toAirport.focus();
			return false;
		}
		//20150609 kdl QC 2249 end

		//el fix for QC 291		
		if(searchForm.tripWay != null && searchForm.tripWay[0].checked ==true){
			//rqb 20120530 Dawgs QC 2250 start
			if(checkSearchDates()){
			if(returnDateValidation()){
					//20120525 Dawgs QC 2004
					searchForm.returnDate.focus();
					return false;
				}
			}else{
				return false;
			}
			//rqb 20120530 Dawgs QC 2250 end
		}		
		//el end
	}
	return true;
}

function flyConfirmedDiscountProgramValidateFlightSearchForm(){
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}
	flyConfirmedDiscountProgramRemoveWhiteSpaceBeforeValidateFlightSearchForm();
	
	var atLeastOneSetOfSearchCriteria = false;
	var flightNumbers = searchForm.flightNumbers;
	var fromAirports = searchForm.fromAirports;
	var toAirports = searchForm.toAirports;
	var leaveDates = searchForm.leaveDates;
	
	for(var counter = 0; counter < flightNumbers.length; counter++ ){
		var flightNumber = flightNumbers[counter].value;
		if (flightNumber != "" && flightNumber != null){
			if(!isNumeric(flightNumber)){
				alert("Invalid Format for Flight Number.");
				searchForm.flightNumbers[counter].focus();
				return false;
			}
		}
		
		var fromAirport = fromAirports[counter].value;
		var toAirport = toAirports[counter].value;
		
		if(fromAirport != null && fromAirport != ""){
			if (isValidAirport(fromAirport)){
				if(toAirport == null || toAirport == ""){
					alert("Please enter or select destination airport.");
					searchForm.toAirports[counter].focus();
					return false;
				}else if (!isValidAirport(toAirport)){
					alert("Please enter a valid airport code.");
					searchForm.toAirports[counter].focus();
					return false;	
				}
				//20150609 kdl QC 2249 start
				if (fromAirport.toUpperCase() == toAirport.toUpperCase()) {
					alert("From, To and Via airport codes cannot be the same.");
					searchForm.toAirports[counter].focus();
					return false;
				}
				//20150609 kdl QC 2249 end
			}else{
				alert("Please enter a valid airport code.");
				searchForm.fromAirports[counter].focus();
				return false;
			}
			atLeastOneSetOfSearchCriteria = true;
		} else if (toAirport != null && toAirport != ""){
			if (isValidAirport(toAirport)){
				if(fromAirport == null || fromAirport == ""){
					alert("Please enter or select origin airport");
					searchForm.fromAirports[counter].focus();
					return false;
				}else if (!isValidAirport(fromAirport)){
					alert("Please enter a valid airport code.");
					searchForm.fromAirports[counter].focus();
					return false;
				}
				//20150609 kdl QC 2249 start
				if (fromAirport.toUpperCase() == toAirport.toUpperCase()) {
					alert("From, To and Via airport codes cannot be the same.");
					searchForm.fromAirports[counter].focus();
					return false;
				}
				//20150609 kdl QC 2249 end
			}else{
				alert("Please enter a valid airport code.");
				searchForm.fromAirports[counter].focus();
				return false;
			}
		}
		
		var leaveDate = leaveDates[counter];
		
		//20120525 Dawgs QC 2250
		if(!validateSearchDate(leaveDate)){
			return false;
		}
	}
	
	if(!atLeastOneSetOfSearchCriteria){
		alert("Please enter at least one set of search criteria to continue searching.");
		return false;
	}
	
	return true;
}

function flyConfirmedDiscountProgramInsertWhiteSpaceAfterValidateFlightSearchForm(){
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}
	
	var flightNumbers = searchForm.flightNumbers;
	var fromAirports = searchForm.fromAirports;
	var toAirports = searchForm.toAirports;
	
	for(var counter = 0; counter < flightNumbers.length; counter++ ){
		var flightNumber = flightNumbers[counter].value;
		var fromAirport = fromAirports[counter].value;
		var toAirport = toAirports[counter].value;
		
		if (flightNumber == "" && flightNumber != null){
			searchForm.flightNumbers[counter].value = " ";
		}
		
		if(fromAirport != "" && fromAirport == null){
			searchForm.fromAirports[counter].value = " ";
		}
		if(toAirport != "" && toAirport == null){
			searchForm.toAirports[counter].value = " ";
		}
		
	}
	
	return true;
}

function flyConfirmedDiscountProgramRemoveWhiteSpaceBeforeValidateFlightSearchForm(){
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}
	
	var flightNumbers = searchForm.flightNumbers;
	var fromAirports = searchForm.fromAirports;
	var toAirports = searchForm.toAirports;
	
	for(var counter = 0; counter < flightNumbers.length; counter++ ){
		var flightNumber = flightNumbers[counter].value;
		var fromAirport = fromAirports[counter].value;
		var toAirport = toAirports[counter].value;
		
		searchForm.flightNumbers[counter].value = trim(flightNumber);
		searchForm.fromAirports[counter].value = trim(fromAirport);
		searchForm.toAirports[counter].value = trim(toAirport);
	}
	
	return true;
}
	
function getRadioChecked(radioObj) {
	if (radioObj != null) {
		if (radioObj.length == null || radioObj.length < 2) {
			if (radioObj.checked) {
				return radioObj.value;
			}
		}
		for (rr = 0; rr < radioObj.length; rr++) {
			if (radioObj[rr].checked) {
				return radioObj[rr].value;
			}
		}
	}
	return null;
}

function validateSearchReturnBookingForm(){
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}

	var retSelect = searchForm.selectFlightReturn;

	if (document.forms[0].booking == null) {
		if (retSelect != null) {
			if (numberOfChecked(retSelect) < 1) {
				alert("Please select at least one flight to continue booking");
				return false;
			}
		} else {
			alert("No flight can be selected for these results. Please try searching for other flights.");
			return false;
		}
	}
	if (!isValidReturnFlight()) {
		alert("Return flight departure time cannot be earlier than Outbound flight arrival time.");
		return false;
	}
	
	if (!isValidAwardTravelFlight("retdepart")){
		alert("Employee Award Travel must be booked the previous calendar date at the latest. Booking an award on the day of travel is not permitted.");
		return false;
	}

	if (!isAwardTravelBeforeExpiration(true)){
		alert("Your Delta Spirit Pass must be booked and travel completed before " + document.forms[0].awardExpirationDate.value);
		return false;
	}

	return true;
}

function validateBookingForm(isAwardTravel) {
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}

	var outSelect = searchForm.selectFlightOut;
	var retSelect = searchForm.selectFlightReturn;

	
	if (isAwardTravel){
		if (numberOfChecked(outSelect) < 1
						|| numberOfChecked(retSelect) < 1) {
					alert("Employee Award Travel must be booked on a roundtrip basis only.");
					return false;
		}
	}

	if (document.forms[0].booking == null) {	
		if (outSelect != null && retSelect == null) {
			if (numberOfChecked(outSelect) < 1) {
				alert("Please select at least one flight to continue booking");
				return false;
			}
		} else if (retSelect != null && outSelect == null) {
			if (numberOfChecked(retSelect) < 1) {
				alert("Please select at least one flight to continue booking");
				return false;
			}
		} else if (retSelect != null && outSelect != null) {
			if (numberOfChecked(outSelect) < 1
					&& numberOfChecked(retSelect) < 1) {
				alert("Please select at least one flight to continue booking");
				return false;
			}
		} else {
			alert("No flight can be selected for these results. Please try searching for other flights.");
			return false;
		}
	}
		
	if (!isValidReturnFlight()) {
		alert("Return flight departure time cannot be earlier than Outbound flight arrival time.");
		return false;
	}
	
	if (isAwardTravel){
		if (!isValidAwardTravelFlight("outdepart")){
			alert("Employee Award Travel must be booked the previous calendar date at the latest. Booking an award on the day of travel is not permitted.");
			return false;
		}
		if (!isAwardTravelBeforeExpiration(false)){
			alert("Your Delta Spirit Pass must be booked and travel completed before " + document.forms[0].awardExpirationDate.value);
			return false;
		}
	}

	return true;

}

function flyConfirmedDiscountProgramValidateBookingForm() {
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}
	
	var selectFlights = new Array();
	for(var counter = 0; counter < searchForm.flightNumbers.length; counter++){
		var selectFlight = "selectFlight";
		selectFlights[counter] = document.getElementsByName(selectFlight+counter);
	}
		
	if (document.forms[0].booking == null) {
		var isFlightSelected = false;
		for(var x = 0; x < selectFlights.length; x++){
			if (selectFlights[x] != null) {
				if (numberOfChecked(selectFlights[x]) > 0) {
					isFlightSelected = true;
				}
			}
		}
		
		if(!isFlightSelected){
			var allSelectFlightNull = true;
			for(var y = 0; y < selectFlights.length; y++){
				if (selectFlights[y] != null){
					allSelectFlight = false;
					break;
				}
			}
			if (!allSelectFlight){
				alert("Please select at least one flight to continue booking");
				return false;
			}else{
				alert("No flight can be selected for these results. Please try searching for other flights.");
				return false;
			}
		}
	}

	return true;
}

function isValidReturnFlight() {
	var selOutId = getRadioChecked(document.forms[0].selectFlightOut);
	var selRetId = getRadioChecked(document.forms[0].selectFlightReturn);
	if (selOutId != null && selOutId != "" && selRetId != null
			&& selRetId != "") {
		var outArriveObj = document.getElementById("outarrive" + selOutId);
		var retDepartObj = document.getElementById("retdepart" + selRetId);
		if (outArriveObj != null && retDepartObj != null) {
			var outArriveTime = outArriveObj.value;
			var retDepartTime = retDepartObj.value;
			outArriveMillis = getDateTimeValue(outArriveTime);
			retDepartMillis = getDateTimeValue(retDepartTime);
			if ((retDepartMillis - outArriveMillis) < 60000) {
				return false;
			}
		}
	}
	return true;
}

function isAwardTravelBeforeExpiration(isChange) {
	var awardExpirationDate = document.forms[0].awardExpirationDate.value;
	var selRetId = "";
	if (isChange){
		selRetId = getRadioChecked(document.forms[0].selectFlightOut);
	}else{
		selRetId = getRadioChecked(document.forms[0].selectFlightReturn);
	}
	if (selRetId != null && selRetId != "" && awardExpirationDate != "") {
		var retDepartObj = document.getElementById("retdepart" + selRetId);
		if (retDepartObj != null) {
			var retDepart = getDateValue(retDepartObj.value);
			var awardExp = getDateValue(awardExpirationDate);
			if (retDepart >= awardExp) {
				return false;
			}
		}
	}
	return true;
}

function validateReservationForm() {
	var reserveForm = document.forms[0];
	if (reserveForm == null) {
		return false;
	}

	if(!validateNWAServiceRequests()){
		return false;
	}	
	
	if (!validPhoneNumber(reserveForm.phoneNumber)) {
		return false;
	}
	
	if(!validEmailAddress(reserveForm.email)){
		return false
	}	
	return true;
}

function validateNonrevReservationForm() {
	var reserveForm = document.forms[0];
	if (reserveForm == null) {
		return false;
	}
	if(!validateSelectedPassenger()){
		return false;
	}
	
	if (!validPhoneNumber(reserveForm.phoneNumber)) {
		return false;
	}
	
	if(!validEmailAddress(reserveForm.email)){
		return false;
	}		

	if(checkYieldFare()){
		if(checkForAllDuplicates(reserveForm.phoneNumber)){
		return false;
	}
	}
	
	if( reserveForm.selectPassengers == null ){
		return true;
	}
	
	if (nothingChecked(reserveForm.selectPassengers)) {
		alert("Please select passengers by checking on the checkbox");
		if (reserveForm.selectPassengers[0]) {
			reserveForm.selectPassengers[0].focus();
		}
		return false;
	}
	
	return true;
}

function validateNWAServiceRequests(){
	var serviceRequests = document.getElementsByName("serviceRequests");
	var isValidServiceRequest = true;
	var ssrCounter = 0;
	if(serviceRequests != null){
	
		for(var indexCounter = 0;indexCounter < serviceRequests.length; indexCounter++){
			if(serviceRequests[indexCounter].value != ""){
				ssrCounter++;
			}
		}
		if(ssrCounter > 1){
			alert("Only one Special Service Request is allowed for Northwest flights.");
			isValidServiceRequest = false;
		}		
	}
	return isValidServiceRequest;
}

function isValidYieldPhoneNumber(phoneNumberObj) {

	var number = phoneNumberObj.value;
	number = number.replace(/-/g, "");

	var phoneNumberArr = new Array();
	phoneNumberArr = number.split("");
	
	for ( var indexCounter in phoneNumberArr) {
		var charOnCheck = phoneNumberArr[indexCounter];

		for ( var indexCounter2 in phoneNumberArr) {
			if ((indexCounter != indexCounter2)
					&& (charOnCheck == phoneNumberArr[indexCounter2])) {
				alert("Please enter a valid phone number.");
				return false;
			}
		}
	}

	return true;
}

function checkForAllDuplicates(phoneNumberObj){
	var number = phoneNumberObj.value;
	number = number.replace(/-/g, "");
	
	var phoneNumberArr = new Array();
	phoneNumberArr = number.split("");
	
	for ( var counter = 0; counter < phoneNumberArr.length; counter++) {		
		if(counter+1 < phoneNumberArr.length){
			if(phoneNumberArr[counter] != phoneNumberArr[counter+1]){
				return false;
			}	
		}
	}	
	alert("Please enter a valid phone number.");
	return true;

}

function checkYieldFare() {
	var hasYieldFare = false;
	var intSelectPassnger;

	var selectPassengerArray = document.getElementsByName("selectPassengers");
	if(selectPassengerArray != null ){
	for ( var counter = 0; counter < selectPassengerArray.length; counter++) {
		intSelectPassnger = parseInt(selectPassengerArray[counter].value);
		if ((selectPassengerArray[counter].checked == true)
				&& (intSelectPassnger >= 60)) {
			hasYieldFare = true;
		}
	}
	}
	return hasYieldFare;
}

function validateFamilyFaresReservationForm() {
	var flyConfirmedForLessForm = document.forms[0];
	if (flyConfirmedForLessForm == null) {
		return false;
	}

	if(!validateSelectedPassenger()){
		return false;
	}
	
	if (!validPhoneNumber(flyConfirmedForLessForm.phoneNumber)) {
		return false;
	}
	
	if(!validEmailAddress(flyConfirmedForLessForm.email)){
		return false;
	}	
	
	if(document.forms[0].confirmationNumber.value == ""){

	if(!validateSelectedPassengerCount("DL")){
		return false;
	}	
	
	if (!setInfantRequestDetails('flyConfirmedForLess')){// aay
		return false;
	}
	//validateInfSsr('flyConfirmedForLess');
		
	if (nothingChecked(flyConfirmedForLessForm.selectPassengers)) {
		alert("Please select passengers by checking on the checkbox");
		flyConfirmedForLessForm.selectPassengers[0].focus();
		return false;
	}
	}

	return true;
}

function validateServiceRequests() {
	var ssrObj = document.forms[0].serviceRequests;
	if (ssrObj.length) {
		for (ii = 0; ii < ssrObj.length; ii) {
			if (ssrObj[ii].checked) {
				populateSsrDetails(ssrObj[ii]);
			}
		}
	}
	return true;
}

function nothingChecked(checkboxObj) {
	if (checkboxObj != null) {
		if (checkboxObj.length) {
			for (ii = 0; ii < checkboxObj.length; ii++) {
				if (checkboxObj[ii].checked) {
					return false;
				}
			}
		} else {
			if (checkboxObj.checked) {
				return false;
			}
		}
	}
	return true;
}

function numberOfChecked(checkboxObj) {
	var count = 0;
	if (checkboxObj != null) {
		if (!checkboxObj.length && checkboxObj.checked) {
			return 1;
		}
		for (ss = 0; ss < checkboxObj.length; ss++) {
			if (checkboxObj[ss].checked) {
				count++;
			}
		}
	}
	return count;
}

function removeCheck(checkboxObj) {
	if (checkboxObj != null) {
		if (!checkboxObj.length) {
			checkboxObj.checked = false;
		}
		for (x = 0; x < checkboxObj.length; x++) {
			checkboxObj[x].checked = false;
		}
	}
}

function openContentWindow(url, windowName, width, height) {
	window.open(url, windowName,
			"resizable=1,scrollbars=1,menubar=0,status=0,toolbar=0,directories=0,height="
					+ height + ",width=" + width);
}

function openWindow(url, windowName) {
	window.open(url,windowName,
					"resizable=1,scrollbars=1,menubar=1,status=1,toolbar=1,directories=1,height=600,width=800");
}

function validEmailAddress(emailObj){
	var email = emailObj.value;
	
	if(email != null && email != "" && !validateEmailAddress(email)){		
		emailObj.focus();
		return false;
	}	
	return true;
}

function validPhoneNumber(phoneNumberObj) {
	var number = phoneNumberObj.value;
	if (number == null || number == "") {
		alert("Please enter a valid phone number");
		phoneNumberObj.focus();
		return false;
	}
	number = number.replace(/-/g, "");
	if (number.length > 15) {
		alert("Please enter a valid phone number");
		phoneNumberObj.focus();
		return false;
	}
	var phonePattern = new RegExp("[0-9]{10}");
	if (!number.match(phonePattern)) {
		alert("Please enter a valid phone number.");
		phoneNumberObj.focus();
		return false;
	}
	phoneNumberObj.value = number;
	return true;
}

function printPage() {
	window.print();
}

function closeWindow() {
	window.close();
}

function getIntegerFromString(stringNumber) {
	if (stringNumber != null && stringNumber != "") {
		while (stringNumber.substring(0, 1) == 0 && stringNumber.length > 1) {
			if (stringNumber.length > 0) {
				stringNumber = stringNumber.substring(1);
			}
		}
		if (stringNumber != null && stringNumber != "") {
			return parseInt(stringNumber);
		}
	}
	return null;
}

// Check for numerics only (no space)
function checkIfNumeric(fieldObject) {
	var validChars = "1234567890";
	return checkChars(fieldObject, validChars);
}

// Check for alphabetic and space characters only
function checkIfAlpha(fieldObject) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ";
	return checkChars(fieldObject, validChars);
}

//Check for alphabetic and space characters only
function checkIfAlphaHyphen(fieldObject) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -";
	return checkChars(fieldObject, validChars);
}

//Check for numerics only (no space)
function checkIfNumericValue(fieldValue) {
	var validChars = "1234567890";
	return checkCharsValue(fieldValue, validChars);
}

// Check for alphabetic and space characters only
function checkIfAlphaValue(fieldValue) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ -";
	return checkCharsValue(fieldValue, validChars);
}

//Check for alpha numeric only
function checkIfAlphaNumericValue(fieldValue) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ";
	return checkCharsValue(fieldValue, validChars);
}

//20150714 mp Lancelot QC-2798 START
//Check for alphanumeric only (no space)
function checkIfAlphaNumericValueOnly(fieldValue) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
	return checkCharsValue(fieldValue, validChars);
}
//20150714 mp Lancelot QC-2798 END

function validateEmailString(emailString) {
	var validChars = "1234567890-_.^~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	for ( var i = 0; i < emailString.length; i++) {
		if (validChars.indexOf(emailString.charAt(i)) == -1) {
			return false;
		}
	}
	return true;
}

function validateEmailAddress(emailAddress){
	//Assumes that valid email addresses consist of user_name@domain.tld
	var email = new Array();
	email = emailAddress.split(';');	
	var at = emailAddress.indexOf('@');	
	var user_name = emailAddress.substr(0, at);
	var domain_name = emailAddress.substr(at + 1, emailAddress.length);
	var dot = domain_name.indexOf('.');
//	if(email.length<2){
//		email = emailAddress.split(',');	
//	}

	if(email.length > 1){
		if(email.length > 3){
			alert('Only a maximum of two(2) valid recipient emails are allowed. Emails should be separated by a semi-colon(;)');	
				return false;
		}else{
			for(var counter =0; counter< 3; counter++){
				if (counter==1 && (email[counter]== " " || email[counter]== null ||  email[counter]== "")){
					return true;
				}else if(counter == 2 && (email[counter]!= " " && email[counter]!= null &&  email[counter]!= "" )){			
					alert('Only a maximum of two(2) valid recipient emails are allowed. Emails should be separated by a semi-colon(;)');	
					return false;
				}else if(counter==2){
					return true;
				}			
				var emailString = trim(email[counter]);
				if(checkForValidEmail(emailString) == false){
				   alert("Please enter two(2) valid email recipient addresses. Emails should be separated by a semi-colon(;)");
				   return false; 
				}					
			}
		}		
	}else{
		if(checkForValidEmail(trim(emailAddress))  == false ){
			alert("Please enter a valid email address. Multiple emails should be separated by a semi-colon(;)");
			return false;  
		}
	}	
	return true;
}

function isValidEmail(str) {
	return (str.indexOf("@") > 0 && str.indexOf("@") < (str.length-1));
}

// Generic code used by the above functions to check for characters that are
// allowed in an input form field
function checkChars(fieldObject, validChars) {
	strValue = fieldObject.value;
	for ( var i = 0; i < strValue.length; i++) {
		if (validChars.indexOf(strValue.charAt(i)) == -1) {
			return false;
		}
	}
	return true;
}

function checkCharsValue(strValue, validChars) {
	for ( var i = 0; i < strValue.length; i++) {
		if (validChars.indexOf(strValue.charAt(i)) == -1) {
			return false;
		}
	}
	return true;
}

function createReservation() {

	if (validateReservationForm()) {
		var confirmMessage = "Are you sure you want to "
				+ "create this reservation?";
		// var resp = confirm( confirmMessage );
		// if( !resp ){
		// return;
		// }
		if(!confirmOverbookSelection()){
			return;
		}
		//nmm 20140902 removed overbook with struts2 rewrite
		//if (getOverBookCount() > 0) {
		//	window.open("showOverbook.do", "overbooking","width = 600px; height = 300px");
		//} else {
			//rqb 20101223 Astros QC 853 start
			checkCobusFirstBusinessWarning();
			//rqb 20101223 Astros QC 853 end
		//}
	}

}

//aay 09162015 Mulan - Unaccompanied Minor popup START
function showUMNRPopup(func){
	var forwardUrl = "/WEB-INF/jsps/UMNRAlertPopup.jsp?function=" + func;
	var forwardDiv = "forward";
	
	showInLayeredPopup("Please Wait.", "400", "160", "", "");
	
	Popup.getUMNRAlert(forwardUrl, function(data) {
	    dwr.util.setValue(forwardDiv, data, { escapeHtml:false });
	    checkForTimeout(forwardDiv);
	    emptyPopupSplash();
	    showLayeredPopup();
	});
}

function selIsUmnr(){
	var selPass = document.getElementsByName("selectPassengers");
	var isUMNR = false;
	var hasMinor = false;
	
	if (selPass != 0) {
		if (selPass.length) {
			for ( var ii = 0; ii < selPass.length; ii++) {
				if (selPass[ii].checked && selPass[ii].alt == "adult" ){ //alt value is the UMNR flag
					isUMNR = false;
					break;
				} else if (selPass[ii].checked && selPass[ii].alt == "minor"){
					hasMinor = true;
					isUMNR = true;
				} else if  (selPass[ii].checked && selPass[ii].alt == ""){
					if (hasMinor){
						isUMNR = true;
					}else{
						isUMNR = false;
					}
				}
			}
		}
	}
	
	return isUMNR;
}

function notSelIsUmnr(){
	var selPass = document.getElementsByName("selectPassengers");
	var isUMNR = false;
	var hasMinor = false;
	
	if (selPass != 0) {
		if (selPass.length) {
			for ( var ii = 0; ii < selPass.length; ii++) {
				if (!selPass[ii].checked && (selPass[ii].alt == "adult") ){ //alt value is the UMNR flag
					isUMNR = false;
					break;
				}else if(!selPass[ii].checked && selPass[ii].alt == "minor"){
					isUMNR = true;
					hasMinor = true;
				}else if (!selPass[ii].checked && selPass[ii].alt == ""){
					if(hasMinor){
						isUMNR = true;
					}else{
						isUMNR = false;
					}
				}
			}
		}
	}
	
	return isUMNR;
}

//rqb 20160908 DeltaSpirit - added UMNR in EAT
//UMNR create reservation
function createReservationAlert(type, embargo){
	var isUMNRFlight = selIsUmnr();
	
	if( !infantNotAlone() ){
		alert("Infant/s without a seat must be listed/associated with at least one adult passrider.");
	}else{
		if(isUMNRFlight){
			if(type == 'nonRev'){
				if(!isEmbargoed(embargo)){	
					showUMNRPopup("createNonrevReservation(" + null + ")");
				}
			}else if(type == 'deltaSpirit'){
				//showUMNRPopup("createOneGreatTeamReservation()");
				alert("Unaccompanied minor travel is not allowed");
			}else{
				
				showUMNRPopup("getFareQuotes()");
			}
		}else{
			//(type == 'nonRev') ? createNonrevReservation(embargo) : getFareQuotes();
			if(type == 'nonRev'){
				createNonrevReservation(embargo);
			}else if(type == 'deltaSpirit'){
				createOneGreatTeamReservation();
			}else{
				getFareQuotes();
			}
		}
	}
}

//UMNR change reservation
function changeReservationAlert(){
	var selPassFlight = selIsUmnr();
	var notSelPassFlight = notSelIsUmnr();
	
	if(selPassFlight || notSelPassFlight){
		showUMNRPopup("selectChangeListing()");
	}else{
		selectChangeListing();
	}	
}

//UMNR cancel reservation
function cancelReservationAlert(type){
	var isUMNRFlight = notSelIsUmnr();
	
	if(isUMNRFlight){
		if(type == 'nonRev'){
			showUMNRPopup("cancelDLListingForSelectedPassenger()");
		}else{
			showUMNRPopup("cancelListingForSelectedPassenger()");
		}
	}else{
		(type == 'nonRev') ? cancelDLListingForSelectedPassenger() : cancelListingForSelectedPassenger();
	}
}

function isEmbargoed(embargo){
	var selPass = document.getElementsByName("selectPassengers");
	var buddyPresent = false;
	if (selPass != 0) {
		if (selPass.length) {
			for ( var ii = 0; ii < selPass.length; ii++) {
				if (selPass[ii].checked && selPass[ii].value*1 >= 60){
					buddyPresent = true;
					break;
				}
			}
		}
	}
	
	if(buddyPresent && (embargo != null && embargo != "")){
		travelEmbargoPopup();
		return true;
	}
	
	return false;
}
//aay 09162015 Mulan - Unaccompanied Minor popup END

function createNonrevReservation(embargo) {
	//aay 09232015 Mulan - Unaccompanied Minor popup START
	if((embargo != null && embargo != "") && isEmbargoed(embargo)){
		return;
	}
	//aay 09232015 Mulan - Unaccompanied Minor popup END
	
	if(!validateSelectedPassengerCount()){
		return;
	}
	
	if (validateNonrevReservationForm()) {
		// var resp = confirm( "Are you sure you want to create this
		// reservation?");
		// if( !resp ){
		// return;
		// }
			if (!setInfantRequestDetails('nonrev')){
				return;
			}
		//nmm 20140902 removed overbook with struts2 rewrite
		//if (getOverBookCount() > 0) {
		//	window.open("showOverbook.do", "overbooking",
		//			"width = 600px; height = 300px");
		//} else {
			submitNonrevReservation();
		//}
	}

}

function validateSelectedPassengerCount() {
	var isCountValid = true;
	var selectedPassengerCount = 0;

	var selectPassengerArray = document.getElementsByName("selectPassengers");
	if(selectPassengerArray != null ){
		for (var counter = 0; counter < selectPassengerArray.length; counter++) {
			if (selectPassengerArray[counter].checked == true){
				selectedPassengerCount++;
			}
		}
	}	
	if(selectedPassengerCount > 14){
		alert("For DL flights a maximum of 14 passengers are allowed.  If more than 14 passengers are required for travel on this trip, more than 1 listing will be required.");
		isCountValid = false;
	}
		
	return isCountValid;
}

function reissueNonrevFareQuotes(pnrNumber, buddyAvailable, embargo) {
	var flightStatus = document.forms[0].getElementsByTagName('a');
	var isFlight = false;
	var withBuddyEmbargo = false;
	
	if((buddyAvailable != null && buddyAvailable != "") && (embargo != null && embargo != "")){
		withBuddyEmbargo = true;
	}
	
	if(flightStatus != null){
		for(var i =0; i< flightStatus.length; i++){
			if(flightStatus[i].name == 'Cancel' || flightStatus[i].name == 'Remove'){
				isFlight = true;
				break;
			}
		}		
	}
	if(withBuddyEmbargo){
		travelEmbargoPopup('changeListings');
	} else if(isFlight){	
		if (validateNonrevReservationForm()) {
			
			if(!checkReissueSelectedCabins()){
				return;
			}
			
			//rqb 20140925 NRSA taxes - removed confirmation popup
			//var resp = confirm("Are you sure you want to update the listing details for Record Locator "
			//		+ pnrNumber + " ?");
			//if (!resp) {
			//	return;
			//}
			
			//nmm 20140902 removed overbook with struts2 rewrite
			//if (getOverBookCount() > 0) {
			//	window.open("showOverbook.do", "overbooking",
			//			"width = 600px; height = 300px");
			//} else {
			
				//rqb 20140925 NRSA taxes - changed msg to 'Please wait'.
				if(showLoadingSplash(PLEASE_WAIT_TEXT)){
					document.forms[0].action = "nonRevenueReissueFareQuote.action";
					document.forms[0].submit();
				}
			//}
		}
	}else{
		alert("At least one flight (CONF/ADD) must be  in the itinerary");
	}
}

function getFareQuotes() {
	if (validateFamilyFaresReservationForm()) {
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		document.forms[0].action = "processBookingData.action?action=tsaProcess";
		document.forms[0].submit();
	}
}

function cancelPassengersFromListingSelection() {
	if(confirm("This will cancel the reservation.  Are you sure you want to continue?")){
		document.forms[0].action = "cancelPassengersFromListingSelection.action";
		document.forms[0].submit();
	}
}

function purchaseNonrevTicket() {
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
	document.forms[0].submit();
}

function cancelDLPassengersFromListingSelection() {
	if(confirm("This will cancel the listing.  Are you sure you want to continue?")){
		document.forms[0].action = "dlCancelPassengersFromListingSelection.action?pageAction=clear";
		document.forms[0].submit();
	}
}

function cancelDLPassengersFromListingSelection2() {
		document.forms[0].action = "dlCancelPassengersFromListingSelection.action?pageAction=clear";
		document.forms[0].submit();
}

function refundDLPassengersFromListingSelection() {
	if(confirm("This will refund the passenger and cancel the listing.  Are you sure you want to continue?")){
		document.forms[0].action = "dlRefundPassengersFromListingSelection.action?pageAction=clear";
		document.forms[0].submit();
	}
}

function refunddDLPassengersFromListingSelection2() {
		document.forms[0].action = "dlRefundPassengersFromListingSelection.action?pageAction=clear";
		document.forms[0].submit();
}

function cancelListingForSelectedPassenger() {
	if(confirm("This will cancel the selected passengers from the reservation.  Are you sure you want to continue?")){
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		document.forms[0].submit();
	}
}

function cancelDLListingForSelectedPassenger() {
	if(confirm("This will cancel the selected passengers from the listing.  Are you sure you want to continue?")){
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		document.forms[0].submit();
	}
}

function refundTicketForSelectedPassenger() {
	if(confirm(" This will cancel the selected passengers from the reservation. \n If there are ticketed passengers selected, their tickets will be refunded. \n Are you sure you want to continue?")){
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		document.forms[0].submit();
	}
}

function getReissueFareQuote() {
	var flightStatus = document.forms[0].getElementsByTagName('a');
	var isFlight = false;
	if(flightStatus != null){
		for(var i =0; i< flightStatus.length; i++){
			if(flightStatus[i].name == 'Cancel' || flightStatus[i].name == 'Remove'){
				isFlight = true;
				break;
			}
		}		
	}	
	if(isFlight){		
		if (validateFamilyFaresReservationForm()) {
			if(confirm("Are you sure you want to change this reservation?")){
				showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
				document.forms[0].action = "processBookingData.action?action=reissueFareQuote";
				document.forms[0].submit();
			}
		}
	}
	else{
		alert("At least one flight (CONF/ADD) must be in the itinerary");
	}
}

function updateCobusReservation(pnrNumber) {
	
	var flightStatus = document.forms[0].getElementsByTagName('a');
	var isFlight = false;
	if(flightStatus != null){
		for(var i =0; i< flightStatus.length; i++){
			if(flightStatus[i].name == 'Cancel' || flightStatus[i].name == 'Remove'){
				isFlight = true;
				break;
			}
		}		
	}	
	if(isFlight){
		if(!confirmOverbookSelection()){
			return;
		}		
		if (validateReservationForm()) {
		var resp = confirm("Are you sure you want to update reservation with record locator "
				+ pnrNumber + " ?");
		if (!resp) {
			return;
		}
		//nmm 20140902 removed overbook with struts2 rewrite
		//if (getOverBookCount() > 0) {
		//	window.open("showOverbook.do", "overbooking",
		//			"width = 600px; height = 300px");
		//} else {
			showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
			document.forms[0].action = "companyBusinessCheckWarning.action?action=change";
			//document.forms[0].action = "companyBusinessReservationDetails.action?initial=yes";
			document.forms[0].submit();
		//}
	}		
	}else{
		alert("At least one flight (CONF/ADD) must be in the itinerary");
	}
}

function upgradeCobusReservation(pnrNumber) {
	
	var upgradeForm = document.forms[0];
	var cabinSelected = upgradeForm.classCode;
	var cabinID = 0;
	var upgradedFlights = 0;
	
	var segmentCount = document.getElementsByName("classCode").length;
	if (segmentCount == 1) {
		cabinID = cabinSelected.options[cabinSelected.selectedIndex].id;
		if(cabinID != 0) {
			upgradedFlights++;
		}
	} else {
		for (var i=0; i<cabinSelected.length; i++){
			cabinID = cabinSelected[i].options[cabinSelected[i].selectedIndex].id;
			if(cabinID != 0) {
				upgradedFlights++;
			}
		}
	}
	
	if (upgradedFlights == 0) {
		alert("Please select a different class if you want to upgrade your itinerary.");
	} else if (validateReservationForm()) {
		var resp = confirm("Are you sure you want to update reservation with record locator "
				+ pnrNumber + " ?");
		if (!resp) {
			return;
		}
		showLoadingSplash(PLEASE_WAIT_TEXT);
		document.forms[0].action = "companyBusinessUpgradeReservationDetails.action";
		document.forms[0].submit();
	}		
}

function getUpdatedFareQuotes() {
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
	document.forms[0].action = "processBookingData.action?action=updatedFareQuote";
	document.forms[0].submit();
}
//nmm 20140902 removed overbook with struts2 rewrite
//function getOverBookCount() {
//	var overbookCount = 0;
//	var body = document.getElementById("data");
//	var rows = body.getElementsByTagName("tr");
//	var counter = rows.length;

//	for ( var i = 1; i < counter; i++) {
//		var data = rows[i].getElementsByTagName("select");
//		if( data == null || data.length < 1 ){
//			continue;
//		}
//		var selIdx = data[0].selectedIndex;
//		var selVal = data[0][selIdx].value;
//		if (selVal == "overbook") {
//			overbookCount++;
//		}
//	}
//	return overbookCount;
//}

function confirmOverbookSelection(){
	var body = document.getElementById("data");
	//var tbody = body.getElementsByTagName("tbody");
	//var rows = tbody[0].getElementsByTagName("tr");
	var rows = body.getElementsByTagName("tr");
	var counter = rows.length;
	//alert("counter: " + counter);
	for ( var i = 0; i < counter-1; i++) {
		var flightOptionSelected = counter > 2 ? document.forms[0].flightOption[i].value : document.forms[0].flightOption.value;
		//alert("flightOptionSelected: " + flightOptionSelected);
		var cabinSelected = counter > 2 ? document.forms[0].classCode[i].value : document.forms[0].classCode.value;
		//alert("cabinSelected: " + cabinSelected);
		var premiumSeat = document.forms[0].premiumSeat[i] != null ? document.forms[0].premiumSeat[i].value : document.forms[0].premiumSeat.value;
		//alert("premiumSeatCount: " + premiumSeat);
		var coachSeat = document.forms[0].coachSeat[i] != null ? document.forms[0].coachSeat[i].value : document.forms[0].coachSeat.value;
		//alert("coachSeatCount: " + coachSeat);
		
		// nmb 05032013 added unavailable option
		if (flightOptionSelected == "unavailable"){
			alert("Cannot confirm the reservation.  One or more of your flights does not have seats available.");
			return false;
		}
		
		/*	nmb 05032013 removed this logic	
		if (cabinSelected == "coach"){
			if (flightOptionSelected == "confirm"){
				if (parseInt(coachSeat,10) <= 0 ){
					alert("Cannot confirm reservation since no seat is available in Coach class. Please choose other booking options like Overbook.");
					return false;
				}
			} else if (flightOptionSelected == "overbook"){
				if (parseInt(coachSeat,10) > 0 ){
					alert("There is/are still seat/s available. Please choose other booking options like Confirm.");
					return false;
				}
			}
		} else if (cabinSelected == "business" || cabinSelected == "first"){
			if (flightOptionSelected == "confirm"){
				if (parseInt(premiumSeat,10) <= 0 ){
					alert("Cannot confirm reservation since no seat is available in Premium class. Please choose other booking options like Overbook.");
					return false;
				}
			} else if (flightOptionSelected == "overbook"){
				if (parseInt(premiumSeat,10) > 0 ){
					alert("There is/are still seat/s available. Please choose other booking options like Confirm.");
					return false;
				}
			}
		}*/
	}
	
	return true;
}

function addMyReservation(confirmation, fromPage) {
	document.forms[0].action = "myReservationsAddFlights.action";
	document.forms[0].confirmationNumber.value = confirmation;
	document.forms[0].fromPage.value = fromPage;
	var resp = confirm("Are you sure you want to add this reservation?");
	if (!resp) {
		return;
	}
	//nmm 20140902 removed overbook with struts2 rewrite
	//if (fromPage != "useTicket"){
		//if (getOverBookCount() != 0) {
		//	window.open("myReservationsShowOverbook.do", "overbooking",
		//			"width = 600px; height = 300px");
		//} else {
		//	document.forms[0].submit();
		//}
	//} else {
		document.forms[0].submit();
	//}
}

function addOverbookDetails(directorName, directorEmail, overbookReason,
		reservation, confirmation) {

	if (validateData(directorName, directorEmail, overbookReason)) {
		window.opener.document.forms[0].directorName.value = directorName;
		window.opener.document.forms[0].directorEmail.value = directorEmail;
		window.opener.document.forms[0].overbookReason.value = overbookReason;
		if (confirmation.length > 1 && reservation == "MyListings") {
			window.opener.document.forms[0].confirmationNumber.value = confirmation;
			window.opener.document.forms[0].action = "myReservationsAddFlights.action";
		} else {
			window.opener.document.forms[0].action = "companyBusinessReservationDetails.action";
		}
		window.opener.document.forms[0].submit();
		window.close();
	}

}

function checkEnter(event, dName, dEmail, oReason, reservation, confirmation) {
	if (event.keyCode == 13) {
		addOverbookDetails(dName, dEmail, oReason, reservation, confirmation);
	}
}

//fix for 1728 & 1729 start
function submitPrevNext(prevNext, outboundReturn, filter) {
	document.forms[0].searchType.value = filter;
	if (prevNext == "prev" && outboundReturn == "outbound") {
		if (filter == "flight"){
			document.forms[0].flightLeaveDate.value = document.forms[0].flightPrevLeaveDate.value;
		}else{
			document.forms[0].leaveDate.value = document.forms[0].prevLeaveDate.value;
		}
		submitSearchPrevNext();
	} else if (prevNext == "next" && outboundReturn == "outbound") {
		if (filter == "flight"){
			document.forms[0].flightLeaveDate.value = document.forms[0].flightNextLeaveDate.value;
		}else{
			document.forms[0].leaveDate.value = document.forms[0].nextLeaveDate.value;
		}
		submitSearchPrevNext();
	} else if (prevNext == "prev" && outboundReturn == "return") {
		document.forms[0].returnDate.value = document.forms[0].prevReturnDate.value;
		submitSearchPrevNext();
	} else if (prevNext == "next" && outboundReturn == "return") {
		document.forms[0].returnDate.value = document.forms[0].nextReturnDate.value;
		submitSearchPrevNext();
	}
}
//fix for 1728 & 1729 end

function flyConfirmedDiscountProgramSubmitPrevNext(date, counter) {
	document.forms[0].leaveDates[counter].value = date;
	flyConfirmedDiscountProgramSubmitSearch();
}

function validateData(dName, dEmail, oReason) {

	var errorMessage = "";

	var name = dName;
	var email = dEmail;
	var reason = oReason;

	var dirError = "";
	var emailError = "";
	var reasonError = "";

	if (checkNull(name)) {
		dirError = "Director Name is required.\n";
	} else if (!checkIfAlphabetical(name)) {
		dirError = "Director Name should be alphabetic.\n";
	}

	if (checkNull(email)) {
		emailError = "Email is required.\n";
	} else if (!validateEmailAddress2(email)) {
		emailError = "Email entered is invalid.\n";
	}

	if (checkNull(reason)) {
		reasonError = "Please add an overbook reason.\n";
	}

	errorMessage = dirError + emailError + reasonError;

	if (errorMessage.length < 1) {

		return true;
	} else {
		alert(errorMessage);
		return false;
	}

}

function checkNull(str) {
	if (str.length < 1) {
		return true;
	} else {
		return false;
	}
}

function validateEmailAddress2(emailAddress){
	if(checkForValidEmail(trim(emailAddress)) == false){
		return false;      
	}
	return true;
}

function checkIfAlphabetical(fieldObject) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ";

	strValue = fieldObject;
	for ( var i = 0; i < strValue.length; i++) {
		if (validChars.indexOf(strValue.charAt(i)) == -1) {
			return false;
		}
	}
	return true;
}

function filterByRoundTrip() {
	searchForm = document.forms[0];
	if (searchForm != null) {
		searchForm.returnDate.disabled = false;
		searchForm.returnTime.disabled = false;
		//rqb 20120510 Dawgs QC 2004
		copyLeaveDate('leave');
		//viaCheck();
		viaAirportCheck();
	}
}

function filterByOneway() {
	searchForm = document.forms[0];
	if (searchForm != null) {
		searchForm.returnDate.disabled = true;
		searchForm.returnTime.disabled = true;
		//viaCheck();
	}
}

function enableSearchByFlight() {
	searchForm = document.forms[0];
	if (searchForm != null) {
		searchForm.fromAirport.disabled = false;
		searchForm.toAirport.disabled = false;
		searchForm.flightCarrierCode.disabled = false;
		searchForm.flightNumber.disabled = false;
		searchForm.leaveDate.disabled = false;
		searchForm.carrierCode.disabled = true;
		searchForm.leaveTime.disabled = true;
		searchForm.returnDate.disabled = true;
		searchForm.returnTime.disabled = true;
		searchForm.tripWay[1].checked = true;
		searchForm.tripWay[0].disabled = true;
	}
}

function enableSearchBySchedule() {
	searchForm = document.forms[0];
	if (searchForm != null) {
		searchForm.fromAirport.disabled = false;
		searchForm.toAirport.disabled = false;
		searchForm.carrierCode.disabled = false;
		searchForm.flightCarrierCode.disabled = true;
		//searchForm.flightNumber.disabled = true;
		//searchForm.flightNumber.value = "";
		searchForm.leaveDate.disabled = false;
		searchForm.leaveTime.disabled = false;
		searchForm.returnDate.disabled = false;
		searchForm.returnTime.disabled = false;
		searchForm.tripWay[0].disabled = false;
	}
}

function checkSearchType() {
//	searchFlight = document.getElementById("searchByFlight");
//	if (searchFlight != null && searchFlight.checked) {
//		enableSearchByFlight();
//	}

	if (document.forms[0].searchType != null) {
		var searchType = document.forms[0].searchType.value;
		if (searchType=='schedule') {
			//enableSearchBySchedule();
			if(document.forms[0].tripWay[1].checked){
				filterByOneway();
			}
		}
	}
//	var searchType = document.getElementById("searchType");

}

function initPage() {
	P7_ExpMenu();
	checkSearchType();
	initNonRevReview();
	initCoBusReview();
}

function getTotalHeight() {
	return getViewportHeight() + getViewportScrollY();
}

function getTotalWidth() {
	return getViewportWidth() + getViewportScrollX();
}

function getViewportWidth() {
	var width = 0;
	if (document.documentElement && document.documentElement.clientWidth) {
		width = document.documentElement.clientWidth;
	} else if (document.body && document.body.clientWidth) {
		width = document.body.clientWidth;
	} else if (window.innerWidth) {
		width = window.innerWidth - 18;
	}
	return width;
}

function getViewportHeight() {
	var height = 0;
	if (document.documentElement && document.documentElement.clientHeight) {
		height = document.documentElement.clientHeight;
	} else if (document.body && document.body.clientHeight) {
		height = document.body.clientHeight;
	} else if (window.innerHeight) {
		height = window.innerHeight - 18;
	}
	return height;
}

function getViewportScrollX() {
	var scrollX = 0;
	if (document.documentElement && document.documentElement.scrollLeft) {
		scrollX = document.documentElement.scrollLeft;
	} else if (document.body && document.body.scrollLeft) {
		scrollX = document.body.scrollLeft;
	} else if (window.pageXOffset) {
		scrollX = window.pageXOffset;
	} else if (window.scrollX) {
		scrollX = window.scrollX;
	}
	return scrollX;
}

function getViewportScrollY() {
	var scrollY = 0;
	if (document.documentElement && document.documentElement.scrollTop) {
		scrollY = document.documentElement.scrollTop;
	} else if (document.body && document.body.scrollTop) {
		scrollY = document.body.scrollTop;
	} else if (window.pageYOffset) {
		scrollY = window.pageYOffset;
	} else if (window.scrollY) {
		scrollY = window.scrollY;
	}
	return scrollY;
}

function trim(str) {
	str = rtrim(ltrim(str));
	return (str);
}

function rtrim(str) {
	while (str.substring(str.length - 1, str.length) == ' ') {
		str = str.substring(0, str.length - 1);
	}
	return (str);
}

function ltrim(str) {
	while (str.substring(0, 1) == ' ') {
		str = str.substring(1, str.length);
	}
	return (str);
}

function initNonRevReview() {
	var passengerChecks = document.forms[0].selectPassengers;
	var confirmationNumber = document.forms[0].confirmationNumber;
	if (passengerChecks != null) {
		if(confirmationNumber == null || confirmationNumber.value == ""){
			if (passengerChecks.length) {
				for ( var ii = 0; ii < passengerChecks.length; ii++) {
					selectPassenger(passengerChecks[ii], passengerChecks[ii].value);
				}
			} else {
				selectPassenger(passengerChecks, passengerChecks.value);
			}
		}
	}
	selectPassengerProcessContinue();
}

function initCoBusReview() {
	var ssrObj = document.getElementsByName("serviceRequest");
	for ( var ii = 0; ii < ssrObj.length; ii++) {
		if (ssrObj[ii].checked) {
			showSsr("00");
		}
	}
}

function initUseTicket(){

	var serviceRequests = document.getElementsByName("serviceRequests");

	var nonRevNumber = null;
	
	for ( var ii = 0; ii < serviceRequests.length; ii++) {

		if (serviceRequests[ii].value != null && serviceRequests[ii].value != "") {
			var nonRevNum = serviceRequests[ii].value.substring(0, 2);
				
			var ssrContainer = document.getElementById("ssrContainer" + nonRevNum);
			var ssrAdd = document.getElementById("ssrAdd" + nonRevNum);
			var ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
			
			if (checkedSsrExists(nonRevNum)) {
				showSsr(nonRevNum);
			} else if(checkedInfantExist(nonRevNum)){
				showSsr(nonRevNum);
				showInfantSsr(nonRevNum);
			} else{
				if(nonRevNumber == null || nonRevNumber != nonRevNum){
					nonRevNumber = nonRevNum;
					if (ssrAdd != null) {
						ssrAdd.style.display = "block";
						ssrAdd.style.visibility = "visible";
						if (ssrContainer != null) {
							ssrContainer.style.display = "none";
						}
						if (ssrInfant != null) {
							ssrInfant.style.display = "none";
						}
					}
				}else{
					continue;
				}
			}
		}
	}
}

function selectPassenger(checkObj, nonRevNum, embargo) {
/*	var selPass = document.getElementsByName("selectPassengers");
	var buddyPresent = false;
	if (selPass != 0) {
		if (selPass.length) {
			for ( var ii = 0; ii < selPass.length; ii++) {
				if (selPass[ii].checked && selPass[ii].value*1 >= 60){
					buddyPresent = true;
					break;
				}
			}
		}
	}
	if (!buddyPresent || (buddyPresent && (embargo == null || embargo == ""))){
	selectPassengerProcessContinue();
	} else{
		travelEmbargoPopup();
	}*/
	selectPassengerProcessContinue();
	selectPassengerProcessSSR(checkObj, nonRevNum);
	// aay 20161005
	toggleAssociateInfant(checkObj,"checkbox",nonRevNum);
}

//rqb 20111223 Chargers QC 2279
//rqb 20131226 - Struts2 - dwr that calls an action class doesn't work in struts2
function travelEmbargoPopup(action) {
	var theTop = (screen.height / 2) - (300 / 2);
	var theLeft = (screen.width / 2) - (500 / 2);
	var features = 'dialogHeight:' + 300 + 'px,dialogWidth:' + 500 + 'px,dialogTop:' + theTop + 'px,dialogLeft:' + theLeft + 'px' + 'dialogWidth:500px; dialogHeight:300px; scroll:auto;';	
	//var stringUrl = "/travelEmbargo.do";
	var stringUrl = "/WEB-INF/jsps/nonrev/nonrevTravelEmbargoPopup.jsp";
	if (action != null && action !=""){
		stringUrl += "?action="+action;
	}
	//window.showModalDialog(stringUrl,window, features);	
	showPageInPopup2(PLEASE_WAIT_TEXT, "720", "250"); //aay 20150817 - QC 2751
	//forward(stringUrl);
	Popup.getTravelEmbargo(stringUrl, function(data) {
    	dwr.util.setValue("forward", data, { escapeHtml:false });
	    checkForTimeout("forward");
    	emptyPopupSplash();
	    showLayeredPopup();
  	});
}

function checkSSR(checkObj, nonRevNum){
	var carrierCode = document.getElementById("carrierCode");
	if(carrierCode != null && carrierCode.value == "NW"){
		var ssrContainer = document.getElementById("ssrContainer" + nonRevNum);	
		
		var serviceRequests = document.getElementsByName("serviceRequests");
		for ( var ii = 0; ii < serviceRequests.length; ii++) {
			if (serviceRequests[ii].value != null
					&& serviceRequests[ii].value != ""
					&& serviceRequests[ii].value.substring(0, 2) == nonRevNum) {
				serviceRequests[ii].selectedIndex = 0;
			}
		}
		
		if (ssrContainer != null) {
			ssrContainer.style.display = "none";
			ssrContainer.style.visibility = "hidden";
		}
	}
	
}

function checkReissueSelectedCabins(){
	var under6 = document.forms[0].passengerUnder6;
	if( under6 != null && under6.value != "" ){
		var selectedCabins = document.forms[0].classCode;
		if( selectedCabins != null ){
			var validCabins = true;
			if( selectedCabins.length ){
				for( ii=0; ii < selectedCabins.length; ii++ ){
					if( selectedCabins[ii].value == "first" || selectedCabins[ii].value == "business" ){
						alert("Invalid class selected for this listing."  
								+ '\n' + "Infants and children less than 6 years old " +
										"must be listed in the Main Cabin.");
						return false;
					}
				}
			} else {
				if( selectedCabins.value == "first" || selectedCabins.value == "business" ){
					alert("Invalid class selected for this listing."  
							+ '\n' + "Infants and children less than 6 years old " +
									"must be listed in the Main Cabin.");
					return false;
				}
			}
		}
	}
	return true;
}

function checkSelectedPassenger(checkObj, nonRevNum, isUnder6, source, embargo, availBuddyCert){
	
	if(checkObj.checked == false){
		checkSSR(checkObj, nonRevNum);
		checkInfant(checkObj, nonRevNum);
		if(isAssociatedToInfant(checkObj)){
			alert("This passenger is associated to an infant, it cannot be unselected.");
			checkObj.checked = true;
			return false;
		}
	}
	
	if (source == "newDay"){
		var selPass = document.getElementsByName("selectPassengers");
		var addPassenger = document.getElementById("travelCompanion");
		var numberOfChecked = 0;
		if (addPassenger != null){
			if (checkObj.checked == true){
				addPassenger.style.display = "none";
			}else{
				if (selPass != null) {
					for ( var ii = 0; ii < selPass.length; ii++) {
						if (selPass[ii].checked == true){
							numberOfChecked += 1;
						}
					}
				}
				if (numberOfChecked == 1){
					addPassenger.style.display = "block";
				}
			}
		}else{
			if (selPass[selPass.length - 1].checked == true){
				if (checkObj.checked == true && (nonRevNum < 40 || nonRevNum > 59)){
					alert("You are only allowed to travel with either family members or a travel companion.");
					checkObj.checked = false;
				}
			}
			if (checkObj.checked == true && (nonRevNum >= 40 && nonRevNum <= 59)){
				if (selPass != null) {
					for ( var i = 0; i < (selPass.length-1); i++) {
						if (selPass[i].checked == true){
							numberOfChecked += 1;
						}
					}
				}
				if (numberOfChecked > 1){
					alert("You are only allowed to travel with either family members or a travel companion.");
					selPass[selPass.length - 1].checked = false;
				}				
			}
		}
	}
	
	validateSelectedPassenger(isUnder6, checkObj, source);
	//rqb 20160121 Alpha - Horizon buddy authorization start
	if (source == "nonrev"){
		countSelectedBuddies(availBuddyCert);
	}
	//rqb 20160121 Alpha - Horizon buddy authorization end
	selectPassenger(checkObj, nonRevNum, embargo);
	
	//cgb 20160204 QC 3309
	setUnder6Selected();
	
}

//rqb 20160121 Alpha - Horizon buddy authorization start
function countSelectedBuddies(availBuddyCert){
	if (availBuddyCert != "" && availBuddyCert > 0){
		var selPass = document.getElementsByName("selectPassengers");
		var inftPass = document.getElementsByName("infantSeat");
		var buddyCount = 0;
		var nonRev = 0;
		var disableOtherBuddies = false;
		if (selPass != null) {
			if (selPass.length) {
				for ( var i = 0; i < selPass.length; i++) {
					nonRev = selPass[i].value; 
					if (nonRev.toString().indexOf('B', 0) === 0){
						if (selPass[i].checked){
							buddyCount++;
							if( inftPass != null ){
								for(var ii = 0; ii < inftPass.length; ii++){
									if (inftPass[ii].value == nonRev){
										buddyCount--;
									}
								}
							}
							if (buddyCount == availBuddyCert) {
								disableOtherBuddies = true;
							}
						}
					}
				}
	
				for ( var j = 0; j < selPass.length; j++) {
					nonRev = selPass[j].value; 
					if (nonRev.toString().indexOf('B', 0) === 0){
						if (selPass[j].checked == false){
							if (disableOtherBuddies){
								selPass[j].disabled = true;
							}else{
								selPass[j].disabled = false;
							}
						}
					}
				}
			}
		}
	}
}
//rqb 20160121 Alpha - Horizon buddy authorization end

function validateSelectedPassenger(isUnder6, checkObj, source){
	//rqb 20160906 DeltaSpirit - unaccompaniment
	if (source == "oneGreatTeam"){
		var selPass = document.getElementsByName("selectPassengers");
		var numberOfChecked = 0;
		var nonRevNum = "";
		if (selPass != null) {
			for ( var ii = 0; ii < selPass.length; ii++) {
				if (selPass[ii].checked == true){
					numberOfChecked += 1;
					nonRevNum = selPass[ii].value;
				}
			}
		}
		if (numberOfChecked == 1){
			 if (nonRevNum >= 40 && nonRevNum <= 58){
				 alert("A travel companion must be accompanied by you or one of your passriders.");
				 return false;
			 }
		}
	}
	
	 var classCode = document.getElementsByName("classCode");
	 var classCodeVal;
	 var isCoach = true;
	 
	 if( classCode != null ){
		 for(var indexCounter = 0; indexCounter < classCode.length; indexCounter++){
			 classCodeVal = classCode[indexCounter].value.toUpperCase();
			 if(source == "flyConfirmedForLess"){
				 if ((classCodeVal == "F") || classCodeVal == "C"){
					 isCoach = false;
						 break;
				 }
			 }else{
				 if ((classCodeVal == "BUSINESS") || classCodeVal == "FIRST"){
				 isCoach = false;
						 break;
					 }
			 }
		 }
	 }

	 var under6Selected = document.getElementById("under6Selected");
	 
	 //cgb 20170224 QC 3443
	 if(source != "flyConfirmedForLess") {
		 if((!isCoach) && (isUnder6 == "true") && (checkObj.checked)){
			 alert("Invalid class selected for this listing."  + '\n' + "Infants and children less than 6 years old must be listed in the Main Cabin.");
			 setClassCodeToCoach(source);
			 if(under6Selected != null){
				under6Selected.value = "true";		
			 }
			 return false;
		 }else if((isCoach) && (isUnder6 == "true") && (checkObj.checked)){
			if(under6Selected != null){
				under6Selected.value = "true";		
			}
		 }else if((isCoach) && (isUnder6 == "true") && (!checkObj.checked)){
			if(under6Selected != null){
				under6Selected.value = "false";		
			}
		 }		
	 }
	 return true;
	 
}

function setClassCodeToCoach(source){
	 var classCode = document.getElementsByName("classCode");
	 var classCodeVal;
	 
	 if( classCode != null ){
		 for(var indexCounter = 0; indexCounter < classCode.length; indexCounter++){
			 classCodeVal = classCode[indexCounter].value.toUpperCase();
			 if(source == "flyConfirmedForLess"){
				 if ((classCodeVal == "F") || classCodeVal == "C"){
					 classCode[indexCounter].value = "Y";
				 }
			 }else{
				 if ((classCodeVal == "BUSINESS") || classCodeVal == "FIRST"){
					 classCode[indexCounter].value = "coach"
				 }
			 }
		 }		 
		 
	 }	
}

function  validateSelectedClassCode(classCodeObj, source){
	validateInfantCabin(classCodeObj, source);
}

function validateInfantCabin(classCodeObj, source){
	var isCoach = true;
	
	if( classCodeObj != null ){
		 var classCodeVal = classCodeObj.value.toUpperCase();
		 if(source == "flyConfirmedForLess"){
			 if ((classCodeVal == "F") || classCodeVal == "C"){
				 isCoach = false;
			 }
		 }else{
			 if ((classCodeVal == "BUSINESS") || classCodeVal == "FIRST"){
				 isCoach = false;
			 }
		 }
	}
	
	var under6Selected = document.getElementById("under6Selected");
	var isUnder6 = false;
	
	if(under6Selected != null){
		isUnder6 = under6Selected.value;		
	}
	
	if((!isCoach) && (isUnder6 == "true")){
		//cgb 20170224 QC 3443
		if(source != "flyConfirmedForLess"){
			alert("Invalid class selected for this listing."  + '\n' + "Infants and children less than 6 years old must be listed in the Main Cabin.");
			classCodeObj.value = "coach";
		}
	}		 
}

function hasPassengerSelected() {

	var selectPassengers = document.forms[0].selectPassengers;
	
	if( selectPassengers == null ){
		return true;
	}
	
	if (selectPassengers.length) {
		for ( var i = 0; i < selectPassengers.length; i++) {
			if (document.forms[0].selectPassengers[i].checked == true) {
				return true;
			}
		}
	} else {
		if (selectPassengers.checked == true) {
			return true;
		}
	}
	return false;
}

function isPassengerSelected( nonRevNumber ) {

	var selectPassengers = document.getElementsByName("selectPassengers");
	
	if( selectPassengers == null ){
		return false;
	}
	
	if (selectPassengers.length) {
		for ( var i = 0; i < selectPassengers.length; i++) {
			if ( selectPassengers[i].value == nonRevNumber
					&& selectPassengers[i].checked ) {
				return true;
			}
		}
	} else {
		if ( selectPassengers.value == nonRevNumber
				&& selectPassengers.checked == true ) {
			return true;
		}
	}
	return false;
}


function selectPassengerProcessContinue() {

	var contEnab = document.getElementById("continueEnabled");
	var contDis = document.getElementById("continueDisabled");
	if (hasPassengerSelected()) {
		if (contEnab != null) {
			contEnab.style.display = "inline";
		}
		if (contDis != null) {
			contDis.style.display = "none";
		}
	} else {
		if (contEnab != null) {
			contEnab.style.display = "none";
		}
		if (contDis != null) {
			contDis.style.display = "inline";
		}
	}
}

function selectPassengerProcessSSR(checkObj, nonRevNum) {
	var ssrContainer = document.getElementById("ssrContainer" + nonRevNum);
	var ssrAdd = document.getElementById("ssrAdd" + nonRevNum);
	var ssrInfant = document.getElementById("ssrInfant" + nonRevNum);

	if (checkObj.checked && checkedSsrExists(nonRevNum)) {
		showSsr(nonRevNum);
		showINFTSsr(nonRevNum);
	} else if(checkObj.checked && checkedInfantExists(nonRevNum)){
		showSsr(nonRevNum);
		showInfantSsr(nonRevNum);
	} else if (!checkObj.checked && checkedSsrExists(nonRevNum)) {
		if (ssrContainer != null) {
			ssrContainer.style.display = "block";
			ssrContainer.style.visibility = "visible";
		}
		deselectServices(nonRevNum);
	} else if (checkObj.checked) {
		if (ssrAdd != null) {
			ssrAdd.style.display = "block";
			ssrAdd.style.visibility = "visible";
			if (ssrContainer != null) {
				ssrContainer.style.display = "none";
			}
			if (ssrInfant != null){
				ssrInfant.style.display = "none";
			}
		} else if (ssrContainer != null) {
			ssrContainer.style.display = "block";
			ssrContainer.style.visibility = "visible";
		}
		if (checkedSsrExists(nonRevNum)) {
			showSsr(nonRevNum);
		}
	}
}

function showInfantSsr(nonRevNum){
	var infantRequests = document.forms[0].infantRequests;
	var ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
	
	if (infantRequests.length) {
		for ( var ii = 0; ii < infantRequests.length; ii++) {
			var ssr = infantRequests[ii].value.split('-');
			if (infantRequests[ii].checked && ssr[1] == "INFT" && ssr[0] == nonRevNum) {
				if (ssrInfant != null){
					ssrInfant.style.display = "block";
					ssrInfant.style.visibility = "visible";
				}
			}
		}
	}else if (infantRequests != null && infantRequests.checked) {
		var ssrs = infantRequests.value.split('-');
		if (ssrs[0] == nonRevNum && ssrs[1] =='INFT') {
			if (ssrInfant != null){
				ssrInfant.style.display = "block";
				ssrInfant.style.visibility = "visible";
			}
		}
	}	
}

function showINFTSsr(nonRevNum){
	var serviceRequests = document.forms[0].serviceRequests;
	var ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
	
	if (serviceRequests.length) {
		for ( var ii = 0; ii < serviceRequests.length; ii++) {
			var ssr = serviceRequests[ii].value.split('-');
			if (serviceRequests[ii].checked && ssr[1] == "INFT" && ssr[0] == nonRevNum) {
				if (ssrInfant != null){
					ssrInfant.style.display = "block";
					ssrInfant.style.visibility = "visible";
				}
			}
		}
	}else if (serviceRequests != null && serviceRequests.checked) {
		var ssrs = serviceRequests.value.split('-');
		if (ssrs[0] == nonRevNum && ssrs[1] =='INFT') {
			if (ssrInfant != null){
				ssrInfant.style.display = "block";
				ssrInfant.style.visibility = "visible";
			}
		}
	}
}

function checkPassenger(nonRevNum) {
	var hasSelected = false;
	var serviceRequests = document.forms[0].serviceRequests;
	if (serviceRequests.length) {
		for ( var i = 0; i < serviceRequests.length; i++) {
			if (serviceRequests[i].checked == true) {
				hasSelected = true;
			}
		}
	} else {
		if (serviceRequests.checked == true) {
			hasSelected = true;
		}
	}

	var selectPassengers = document.forms[0].selectPassengers;
	if (selectPassengers != null){
		if (selectPassengers.length) {
			for ( var x = 0; x < selectPassengers.length; x++) {
				if (selectPassengers[x].value == nonRevNum) {
					if (hasSelected) {
						selectPassengers[x].checked = true;
					}
					break;
				}
			}
		} else {
			if (selectPassengers.value == nonRevNum) {
				if (hasSelected) {
					selectPassengers.checked = true;
				}
			}
		}
	}
}

function checkedSsrExists(nonRevNum) {
	var ssrObj = document.getElementsByName("serviceRequests");
	if (ssrObj.length) {
		for ( var ii = 0; ii < ssrObj.length; ii++) {
			if (ssrObj[ii].checked) {
				var ssr = ssrObj[ii].value.split('-');
				if (ssr[0] != null && ssr[0] == nonRevNum) {
					return true;
				}
			}
		}
	} else if (ssrObj != null && ssrObj.checked) {
		var ssrs = ssrObj.value.split('-');
		if (ssrs[0] != null && ssrs[0] == nonRevNum) {
			return true;
		}
	}
	return false;
}

function deselectServices(nonRevNum) {
	var serviceRequests = document.getElementsByName("serviceRequests");
	for ( var ii = 0; ii < serviceRequests.length; ii++) {
		if (serviceRequests[ii].value != null
				&& serviceRequests[ii].value != ""
				&& serviceRequests[ii].value.substring(0, 2) == nonRevNum) {
			serviceRequests[ii].checked = false;
		}
	}
}

function showSsr(nonRevNum) {
	var ssrAdd = document.getElementById("ssrAdd" + nonRevNum);
	var ssrContainer = document.getElementById("ssrContainer" + nonRevNum);
	if (ssrAdd != null && ssrContainer != null) {
		ssrAdd.style.display = "none";
		ssrContainer.style.display = "block";
		ssrContainer.style.visibility = "visible";
	}
}

function showInfantDetails(checkObject, nonRevNum, source){
	var ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
	if (ssrInfant != null && checkObject.checked){
		ssrInfant.style.display = "block";
		ssrInfant.style.visibility = "visible";
		validateInfantSsr(source);
		//cgb 20160204 QC 3309
		setUnder6Selected(true);
	} else if (ssrInfant != null && checkObject.checked != true){
		ssrInfant.style.display = "none";
		ssrInfant.style.visibility = "hidden";
		//cgb 20160204 QC 3309
		setUnder6Selected();
	}
	checkPassenger(nonRevNum);
}

function validateInfantSsr(source){
	var classCode = document.getElementsByName("classCode");
	var classCodeVal;
	var isCoach = true;
	var listClass = document.getElementsByName("listClass");
	var listClassVal;
	
	if( classCode != 0 ){
		for(var indexCounter = 0; indexCounter < classCode.length; indexCounter++){
			classCodeVal = classCode[indexCounter].value.toUpperCase();
			if(source == "flyConfirmedForLess"){
				if ((classCodeVal == "F") || classCodeVal == "C"){
					isCoach = false;
					break;
				}
			}else{
				if ((classCodeVal == "BUSINESS") || classCodeVal == "FIRST"){
					isCoach = false;
					break;
				}
			}
		}
	} else if (listClass != 0 ){
		for(var counter = 0; counter < listClass.length; counter++){
			if (listClass[counter].checked){
				listClassVal = listClass[counter].value.toUpperCase();
				if(source == "nonrev" && listClassVal == "FC"){
					isCoach = false;
					listClass[1].checked = true;
					document.forms[0].selectedInfantInArmsSsr.value = "";
					break;
				}
			}
		}
	}else {
		document.forms[0].selectedInfantInArmsSsr.value = "chosen";
	}

	if(!isCoach){
		//cgb 20170224 QC 3443
		if(source != "flyConfirmedForLess"){
			alert("Invalid class selected for this listing."  + '\n' + "Infants and children less than 6 years old must be listed in the Main Cabin.");
			setClassCodeToCoach(source);
		}
	}
}

function setInfantSsrDetails(source){
	var serviceRequests = document.forms[0].serviceRequests;
	
	var serviceRequest;
	var nonRevNum;
	var serviceRequestCode;
	var ssrInfant;
	var infantDetails;
	
	if (serviceRequests != null){
		if (serviceRequests.length){
			for (var i=0; i<serviceRequests.length; i++){
				if (serviceRequests[i].checked){
					serviceRequest = serviceRequests[i].value.split("-");
					nonRevNum = serviceRequest[0];
					serviceRequestCode = serviceRequest[1];
					//mia 20100827 infant field validation start
					if (serviceRequestCode == 'INFT'){
						ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
						infantDetails = ssrInfant.getElementsByTagName("INPUT");
						if (infantDetails[0] == null || infantDetails[0].value == "" || checkForSpace(infantDetails[0])){
							alert("Please enter the first name of the infant.");
							infantDetails[0].focus();
							return false;
						}else if(!checkIfAlphaNoSpace(infantDetails[0])){
							alert("First name of the infant must be alphabetic.");
							infantDetails[0].focus();	
							return false;
						}
						if (infantDetails[1] != null && trim(infantDetails[1].value)!= ""  && infantDetails[1].value != " " 
							&& !checkIfAlphaNoSpace(infantDetails[1])){
							alert("Middle initial of the infant must be alphabetic.");
							infantDetails[1].focus();	
							return false;
						}
						if (infantDetails[2] == null || infantDetails[2].value == "" || checkForSpace(infantDetails[2])){
							alert("Please enter the last name of the infant.");
							infantDetails[2].focus();
							return false;
						}else if(!checkIfAlphaNoSpace(infantDetails[2])){
							alert("Last name of the infant must be alphabetic.");
							infantDetails[2].focus();	
							return false;
						}
						//mia 20100827 infant field validation end
						if (infantDetails[3] == null || infantDetails[3].value == ""){
							alert("Please enter the date of birth of the infant.");
							infantDetails[3].focus();
							return false;
						}
						if (!checkBirthDateFormat(infantDetails[3], "Please enter a valid date of birth.", true)){
							return false;
						}
						serviceRequests[i].value = nonRevNum + "-" + serviceRequestCode + "-" + infantDetails[0].value + "-" + infantDetails[1].value + "-" + infantDetails[2].value + "-" + infantDetails[3].value;
						if (source != "" && source != null){
							validateInfantSsr(source);
						}
					}
				}			
			}
			return true;
		}else{
			if (serviceRequests.checked){
				serviceRequest = serviceRequests.value.split("-");
				nonRevNum = serviceRequest[0];
				serviceRequestCode = serviceRequest[1];
				if (serviceRequestCode == 'INFT'){
					ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
					infantDetails = ssrInfant.getElementsByTagName("INPUT");
					if (!checkBirthDateFormat(infantDetails[3], "Please enter a valid date of birth.", true)){
						return false;
					}
					if (infantDetails[0] == null || infantDetails[0].value == ""  || checkForSpace(infantDetails[0])){
						alert("Please enter the first name of the infant.");
						infantDetails[0].focus();
						return false;
					}else if(!checkIfAlphaNoSpace(infantDetails[0])){
						alert("First name of the infant must be alphabetic.");
						infantDetails[0].focus();	
						return false;
					}
					if (infantDetails[1]!= null && trim(infantDetails[1].value) != "" && infantDetails[1].value != " " 
						&& !checkIfAlphaNoSpace(infantDetails[1])){
						alert("Middle initial of the infant must be alphabetic.");
						infantDetails[1].focus();	
						return false;
					}
					if (infantDetails[2] == null || infantDetails[2].value == "" || checkForSpace(infantDetails[2])){
						alert("Please enter the last name of the infant.");
						infantDetails[2].focus();
						return false;
					}else if(!checkIfAlphaNoSpace(infantDetails[2])){
						alert("Last name of the infant must be alphabetic.");
						infantDetails[2].focus();
						return false;
					}
					if (infantDetails[3] == null || infantDetails[3].value == ""){
						alert("Please enter the date of birth of the infant.");
						infantDetails[3].focus();
						return false;
					}
					
					serviceRequests[i].value = nonRevNum + "-" + serviceRequestCode + "-" + infantDetails[0].value + "-" + infantDetails[1].value + "-" + infantDetails[2].value + "-" + infantDetails[3].value;
					if (source != "" && source != null){
						validateInfantSsr(source);
					}
					return true;
				}
			}
		}
	}

	return true;
}

//mia 20100827 infant field validation start
function checkInfantFirstName(field){	
	if(field != null && field.value != "" && !checkIfAlphaNoSpace(field)){
		alert("First name of the infant must be alphabetic.");		
	}else if (field== null || field.value == ""  || checkForSpace(field)){
		alert("Please enter the first name of the infant.");	
	}	
}
function checkInfantLastName(field){
	if(field != null && field.value != "" && !checkIfAlphaNoSpace(field)){
		alert("Last name of the infant must be alphabetic.");	
	}else if (field== null || field.value == ""  || checkForSpace(field)){
		alert("Please enter the last name of the infant.");	
	}		
}
function checkInfantMiddle(field){
	if(field != null && field.value != "" && field.value != " " && !checkIfAlphaNoSpace(field)){
		alert("Middle initial of the infant must be alphabetic.");
	}	
}
//mia 20100827 infant field validation end

function agreeCreditCardConfirm() {
	if (document.forms[0].agreeCreditCardConfirm.checked) {
		document.forms[0].agreeCreditCardConfirm.value = "true";
		return true;
	} else {
		document.forms[0].agreeCreditCardConfirm.value = "false";
	}
	return false;
}

function checkValForAllDuplicates(objValue){
	objValue = objValue.replace(/-/g, "");
	
	var valArr = new Array();
	valArr = objValue.split("");
	
	for ( var counter = 0; counter < valArr.length; counter++) {		
		if(counter+1 < valArr.length){
			if(valArr[counter] != valArr[counter+1]){
				return false;
			}	
		}
	}	
	return true;
}

function validateCreditCardInfo(type) {
	var msg = new Array();
	msg[0] = "";
	var errorMessage = "";
	var form = document.forms[0];
	var agree = agreeCreditCardConfirm();
	var selected = "";
	var expMonth = trim(form.expirationMonth.options[form.expirationMonth.selectedIndex].value);
	var expYear = trim(form.expirationYear.options[form.expirationYear.selectedIndex].value);	
	var date = new Date();	
	selected = trim(form.creditCardType.options[form.creditCardType.selectedIndex].value);

	if (checkNull(form.creditCardNumber.value)) {
		msg[msg.length] = "Credit or debit card number is required.\n";
	} else if (!checkIfNumeric(form.creditCardNumber)) {
		msg[msg.length] = "Digits required for credit or debit card number.\n";

	} else if (form.creditCardNumber.value.length != 16
			&& (selected == "Visa" || selected == "Mastercard" || selected == "Discover Card")) {
		msg[msg.length] = "Credit or debit card number must be 16 digits for Visa, Mastercard or Discover Card.\n";
	} else if (form.creditCardNumber.value.length != 14
			&& (selected == "Diners Club" || selected == "Carte Blanche")) {
		msg[msg.length] = "Credit or debit card number must be 14 digits for Diners Club or Carte Blanche.\n";
	} else if (form.creditCardNumber.value.length != 15 && selected == "American Express") {
		msg[msg.length] = "Credit or debit card number must be 15 digits for American Express.\n";
	}else if (date.getFullYear()*1 > (expYear * 1)){	
		msg[msg.length] = "The credit or debit card is already expired.\n";
	}else if (date.getFullYear()*1 == (expYear * 1)){		
		if((date.getMonth()+1)  >= (expMonth * 1)){
			msg[msg.length] = "The credit or debit card is already expired.\n";
	}
	}	
	if (checkNull(form.firstName.value)) {
		msg[msg.length] = "First name is required.\n";
	} else if (!checkIfAlpha(form.firstName)) {
		msg[msg.length] = "First name should be alphabetic.\n";
	}

	if (checkNull(form.lastName.value)) {
		msg[msg.length] = "Last name is required.\n";
	} else if (!checkIfAlphaHyphen(form.lastName)) {
		msg[msg.length] = "Last name should be alphabetic.\n";
	}

	if (checkNull(trim(form.address1.value)) && checkNull(trim(form.poBoxNumber.value))) {
		msg[msg.length] = "Please provide either Address or P.O. Box .\n";
		form.address1.value = "";
		form.poBoxNumber.value = "";
	} 
	/*
	else if (!checkIfAlphaNumericDash(form.address1)) {
		msg[msg.length] = "Address should contain only letters and numbers.\n";
		form.address1.focus;
	} else{
		filterAddress(form.address1.value);
	}
	*/

	if (checkNull(form.city.value)) {
		msg[msg.length] = "City is required.\n";
		form.city.focus;
	} else if (!checkIfAlpha(form.city)) {
		msg[msg.length] = "City should be alphabetic.\n";
		form.city.focus;
	}

	var state = document.forms[0].stateProvince;
	var selectedCountry = document.forms[0].country.options[document.forms[0].country.selectedIndex].value;
	if ((trim(selectedCountry) == "United States") || (trim(selectedCountry) == "Canada")) {
		if (document.forms[0].stateProvince.value == "N/A") {
			//rqb 20120516 Dawgs QC 1433
			msg[msg.length] = "Please select a state or province.\n";
		}
	}
	
	if (checkNull(form.postalCode.value)) {
		msg[msg.length] = "Postal Code is required.\n";
	} else if (((selectedCountry.toUpperCase() != "CANADA") && (selectedCountry.toUpperCase() != "ALL OTHER COUNTRIES")) && (!checkIfNumeric(form.postalCode))) {
		msg[msg.length] = "Postal code should be numeric.\n";
		form.postalCode.focus;
	}/*  else if (form.postalCode.value.length > 5) {
		msg[msg.length] = "Invalid Length for Postal code.\n";
		form.postalCode.focus;
	}*/ else if (checkValForAllDuplicates(form.postalCode.value)){
		msg[msg.length] = "Invalid Format for Postal code.\n";
		form.postalCode.focus;		
	}

	if (!checkIfAlphaNumeric(form.poBoxNumber)) {
		msg[msg.length] = "P.O. Box should contain only letters and numbers.\n";
		form.poBoxNumber.focus;
	}

	var skyMiles = form.elements["skyMiles"];
	if (skyMiles != null) {

		if(typeof skyMiles.length == "undefined"){
			if (!checkNull(trim(skyMiles.value))) {
				if (trim(skyMiles.value).length != 10) {
					msg[msg.length] = "SkyMiles should be 10 digits, SkyMiles should contain Alphanumeric characters only.\n";
				}
				if (!checkIfAlphaNumeric(skyMiles)) {
					msg[msg.length] = "SkyMiles should be 10 digits, SkyMiles should contain Alphanumeric characters only.\n";
				}
			}
		}else{
			for (i = 0; i < skyMiles.length; i++) {
				if (!checkNull(trim(skyMiles[i].value))) {
					if (trim(skyMiles[i].value).length != 10) {
						msg[msg.length] = "SkyMiles should be 10 digits, SkyMiles should contain Alphanumeric characters only.\n";
						break;
					}
					if (!checkIfAlphaNumeric(skyMiles[i])) {
						msg[msg.length] = "SkyMiles should be 10 digits, SkyMiles should contain Alphanumeric characters only.\n";
						break;
					}
				}
			}
		}
	
	}
	if (!agree && msg.length < 2) {
		msg[msg.length] = "You must agree in order to proceed.\n";
	}
	
	for (var i = 0; i < msg.length; i++) {
		errorMessage += msg[i];
	}
	if (errorMessage.length < 1) {
		if (type == 'booking'){
			createReservationConfirmation();
		}else if (type == 'change'){
			changeReservationConfirmation();
		}else{
			showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
			form.submit();
		}
	} else {
		alert(errorMessage);
	}

}

function filterAddress(address){	
	return address.replace("-","");	
}

function validateCreditCardInfoForChangeListing(pnrNumber) {
	var msg = new Array();
	msg[0] = "";
	var errorMessage = "";
	var form = document.forms[0];
	var agree = agreeCreditCardConfirm();
	var selected = "";
	var expMonth = trim(form.expirationMonth.options[form.expirationMonth.selectedIndex].value);
	var expYear = trim(form.expirationYear.options[form.expirationYear.selectedIndex].value);
	var date = new Date();	
	selected = trim(form.creditCardType.options[form.creditCardType.selectedIndex].value);

	if (checkNull(form.creditCardNumber.value)) {
		msg[msg.length] = "Credit or debit card number is required.\n";
	} else if (!checkIfNumeric(form.creditCardNumber)) {
		msg[msg.length] = "Digits required for credit or debit card number.\n";
	} else if (form.creditCardNumber.value.length != 16
			&& (selected == "Visa" || selected == "Mastercard" || selected == "Discover Card")) {
		msg[msg.length] = "Credit or debit card number must be 16 digits for Visa, Mastercard or Discover Card .\n";
	} else if (form.creditCardNumber.value.length != 14
			&& (selected == "Diners Club" || selected == "Carte Blanche")) {
		msg[msg.length] = "Credit or debit card number must be 14 digits for Diners Club or Carte Blanche.\n";
	} else if (form.creditCardNumber.value.length != 15 && selected == "American Express") {
		msg[msg.length] = "Credit or debit card number must be 15 digits for American Express.\n";
	} else if (date.getFullYear()*1 > (expYear * 1)){
		msg[msg.length] = "The credit or debit card is already expired.\n";
	}else if (date.getFullYear()*1 == (expYear * 1)){
		if((date.getMonth()+1 >= (expMonth * 1)) ){
			msg[msg.length] = "The credit or debit card is already expired.\n";
		}
	}

	if (checkNull(form.firstName.value)) {
		msg[msg.length] = "First name is required.\n";
	} else if (!checkIfAlpha(form.firstName)) {
		msg[msg.length] = "First name should be alphabetic.\n";
	}

	if (checkNull(form.lastName.value)) {
		msg[msg.length] = "Last name is required.\n";
	} else if (!checkIfAlphaHyphen(form.lastName)) {
		msg[msg.length] = "Last name should be alphabetic.\n";
	}
	
	if (!agree && msg.length < 2) {
		msg[msg.length] = "You must agree in order to proceed.\n";
	}
	var i = (msg.length - 1);
	for (i; i > 0; i--) {
		errorMessage += msg[i];
	}
	
	if (errorMessage.length < 1) {
		//rqb 20140925 NRSA taxes - add confirmation popup
		if (pnrNumber != null){
			var resp = confirm("Are you sure you want to update the listing details for Record Locator "
					+ pnrNumber + " ?");
			if (!resp) {
				return;
			}
		}
		hideContinueButton();
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		form.submit();

	} else {
		alert(errorMessage);
		//mia code changes for QC 1244 start 
		//unhideContinueButton();
		//mia code changes for QC 1244 end		
	}

}

function continueReissueTicketing(){
//	showLoadingSplash("Please wait while the system updates your reservation.");
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
	document.forms[0].action = "reissueRefund.action";
	document.forms[0].submit();
}

//rqb 20140918 NRSA taxes start
function continueNonrevReissueTicketing(payrollDeduct, pnrNumber){
	var continueUpdate = true;
	if (payrollDeduct){
		if( !agreeCreditCardConfirm() ){
			alert("You must agree in order to proceed");
			continueUpdate = false;
		}
	}
	if (continueUpdate){
		var resp = confirm("Are you sure you want to update the listing details for Record Locator "
				+ pnrNumber + " ?");
		if (!resp) {
			return;
		}
	
		hideContinueButton();
		showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		document.forms[0].action = "nonRevenueReissueRefund.action";
		document.forms[0].submit();
	}
}
//rqb 20140918 NRSA taxes end

function checkIfAlphaNumeric(fieldObject) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890";
	return checkChars(fieldObject, validChars);
}

function checkIfAlphaNumericDash(fieldObject) {
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890-";
	return checkChars(fieldObject, validChars);
}

//20120509 Dawgs QC 1433 start
function notInUSA(fromPage) {
	var state = document.forms[0].stateProvince;
	if(state == null){
		// for award travel comapanion
		state = document.forms[0].state;
	}
	var arrTexts = new Array();
	var selectedCountry = document.forms[0].country.options[document.forms[0].country.selectedIndex].value;
	selectedCountry = selectedCountry.toUpperCase();
	if ( trim(selectedCountry) != "UNITED STATES OF AMERICA"
		&&	trim(selectedCountry) != "UNITED STATES" 
		&& trim(selectedCountry) != "CANADA" 	
		&& trim(selectedCountry) != "US" 
		&& trim(selectedCountry) != "USA" 
		&& trim(selectedCountry) != "CAN" ) {
		state.options[0].selected = "selected";
		state.disabled = "disabled";
		if (fromPage == 'ccPage'){
			state.options[0].text = "N/A";
		}
	} else {
		state.disabled = false;
		if (fromPage == 'ccPage'){
			state.options[0].text = "";
		}
	}
}
//20120509 Dawgs QC 1433 end

function setUSADefault(){
	var country = document.forms[0].country;	
	if (country != null){
		var countryOptions = country.options;
		for(var i=0; i<countryOptions.length; i++ ){
			if(countryOptions[i].value=='US' || countryOptions[i].value=='USA'){
				countryOptions[i].selected = "selected";
				break;
			}
		}
	}
}

function isValidAirport(airportCode) {
	var airportListObj = document.getElementById("City_codes");
	if (airportListObj == null){
		airportListObj = document.getElementById("airportSelect");
	}
	
	if (airportListObj != null && airportListObj.options != null) {
		var airports = airportListObj.options;
		for ( var ii = 0; ii < airports.length; ii++) {
			if (airportCode.toUpperCase() == airports[ii].value.toUpperCase()) {
				return true;
			}
		}
	}
	return false;
}

function checkCrewTravel(checkCrewObj) {
	if (checkCrewObj.checked) {
		var crewTravelItinerary = document
				.getElementById("crewTravelItinerary");
		if (crewTravelItinerary == null || crewTravelItinerary.value != "true") {
			alert("Selected Flights are not valid for Crew Travel. "
					+ "Crew Travel is limited to MSP and ATL");
			checkCrewObj.checked = false;
		}
	}
}
function showLearnMore() {
	var theTop = (screen.height / 2) - (210 / 2);
	var theLeft = (screen.width / 2) - (500 / 2);
	var features = 'height=' + 220 + ',width=' + 500 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=yes";

	var stringUrl = "learnMore.action";
	window.open(stringUrl, "LearnMore", features);
}

function showBrowserCompatibilityPopup() {
	var theTop = (screen.height / 2) - (400 / 2);
	var theLeft = (screen.width / 2) - (650 / 2);
	var features = 'height=' + 500 + ',width=' + 650 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=no";

	var stringUrl = "browserCompatibility.action";
	window.open(stringUrl, "BrowserCompatibility", features);
}

function isSomeoneMissingPopup() {
	var theTop = (screen.height / 2) - (270 / 2);
	var theLeft = (screen.width / 2) - (520 / 2);
	var features = 'height=' + 270 + ',width=' + 520 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=no";
	var stringUrl = "isSomeoneMissing.action";

	window.open(stringUrl, "IsSomeoneMissing", features);
}

function isSomeoneMissingRedirect(type, link) {
	var features = "";

	if (type == "ess") {
		features = 'height=' + 500 + ',width=' + 700 + ',top=' + 100 + ',left='
				+ 300 + ",scrollbars=yes";
		//TODO remove hardcode of this link here. put in redirect.ini
		window.open(link,	"EmployeeSelfService", features);
		window.close();
	} else if (type == "buddy") {
		window.opener.showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
		window.opener.document.forms[0].action = "getBuddypassAction.action";
		window.opener.document.forms[0].submit();
		window.close();
	}
}

//20110113 rzs - Chargers / buddy certification / call this function only on the buddy authorize page
function certifyBuddyPass(link) {
	var features = "";
	features = 'height=' + 500 + ',width=' + 700 + ',top=' + 100 + ',left='
				+ 300 + ",scrollbars=yes";
	window.open(link,	"EmployeeSelfService", features);
}


function limitOneCheck(checkObj) {
	if (!checkObj.checked) {
		checkObj.checked = false;
		return;
	}
	var checkboxes = document.getElementsByName(checkObj.name);
	if (checkboxes != null) {
		if (checkboxes.length) {
			for ( var ii = 0; ii < checkboxes.length; ii++) {
				checkboxes[ii].checked = false;
			}
		}
	}
	checkObj.checked = true;
}

function addMoreFlights(bookingType) {
	if (bookingType == "nonRevenue") {
		setInfantRequestDetails();// aay
		document.forms[0].action = "nonRevenueReservationReview.action?action=addFlights";
	} else if (bookingType == "companyBusiness") {
		document.forms[0].action = "companyBusinessReservationReview.action?action=addFlights";
	} else if (bookingType == "flyConfirmedForLess") {
		document.forms[0].action = "flyConfirmedForLessReservationReview.action?action=addFlights";
	} else if (bookingType == "oneGreatTeam") {
		setInfantRequestDetails();// aay
		document.forms[0].action = "oneGreatTeamReview.action?action=addFlights";
	} else if (bookingType == "newDay") {
		setInfantSsrDetails();
		document.forms[0].action = "newDayReview.action?action=addFlights";
	} else if (bookingType == "skyTeamSummerRewards") {
		setInfantSsrDetails();
		document.forms[0].action = "skyTeamSummerRewardsReview.action?action=addFlights";
	}
	document.forms[0].submit();
}

function selCheckPassenger(selPass, checked, source) {
	if (selPass != null) {
		if (selPass.disabled == false){
			if( selPass.checked != checked ){
				selPass.click();
			}
			selPass.checked = checked;
		}
	}
}

function checkAllPassengers(selAllObj,source) {
	var selPass = document.getElementsByName("selectPassengers");
	if (selPass != null) {
		if (selPass.length) {
			for ( var ii = 0; ii < selPass.length; ii++) {
				selCheckPassenger(selPass[ii], selAllObj.checked, source );
			}
		} else {
			selCheckPassenger(selPass, selAllObj.checked, source );
		}
	}
}

function startOver(startOverURL, type){
	if(confirm("Are you sure you want to cancel this " + type + " ?")){
		document.forms[0].action = startOverURL;
		document.forms[0].submit();
	}
}

function awardTravelStartOver(startOverURL){
	document.forms[0].action = startOverURL 
	document.forms[0].submit();
}


function cancelChanges(startOverURL, type){

	if(confirm("This will undo changes made to this " + type + ".  Are you sure you want to continue?")){
		document.forms[0].action = startOverURL 
		document.forms[0].submit();
	}
}

function showErrorOccurredPopup(origin, destination, errorMessage){
	var theTop = (screen.height / 2) - (140 / 2);
	var theLeft = (screen.width / 2) - (400 / 2);
	var features = 'height=' + 140 + ',width=' + 400 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=yes";

	var stringUrl = "errorOccurred.action?origin=" + origin + "&destination=" + destination + "&errorMessage=" + errorMessage;
	window.open(stringUrl, "ErrorOccurred", features);
}

function printInterlineTravel() {
	window.showModalDialog("interlineTravelAction.action?printPage=true", "Interline Travel",
			"dialogWidth:750px;dialogHeight:550px");
}

function infantNotAlone(){
	var infantSeat = document.getElementsByName("infantSeat");
	var adultCompanion = document.getElementsByName("inftCmpn");
	var infantCount = 0;
	var passengerCount = 0;
	var twelveOrOlderCount = 0;
	
	var serviceRequests =document.getElementsByName("serviceRequests");
	var serviceRequest;
	if (serviceRequests.length){
		for (ii = 0; ii < serviceRequests.length; ii++){
			serviceRequest = serviceRequests[ii].value.split("-");
			if (serviceRequest[1] == 'INFT' && serviceRequests[ii].checked){
				twelveOrOlderCount++;
			}
		}
	}else {
		if (serviceRequests.value != null && serviceRequests.value !=''){
			serviceRequest = serviceRequests.value.split("-");
			if (serviceRequest[1] == 'INFT' && serviceRequests[ii].checked){
				twelveOrOlderCount++;
			}
		}
	}
	
	if( infantSeat != null ){
		
		if( infantSeat.length ){
			for( ii = 0; ii < infantSeat.length; ii++ ){
				if( infantSeat[ii].value != null 
						&& infantSeat[ii].value != '' ){
					if( isPassengerSelected( infantSeat[ii].value ) ){
						infantCount++;
					}
				}
			}
		} else {
			
			if( infantSeat.value != null
					&& infantSeat.value != ''){
				if( isPassengerSelected( infantSeat.value ) ){
					infantCount++;
				}
			}
		}
	}
	//var selPassengers = document.getElementsByName("selectPassengers");
	var selPassengers = document.forms[0].selectPassengers;
	if( selPassengers != null ){
		if( selPassengers.length ){
			for( ii = 0; ii < selPassengers.length; ii++ ){
				if( selPassengers[ii].checked ){
					passengerCount++;
				}
			}
		} else {
			if( selPassengers.checked ){
				passengerCount++;
			} 
		}
	}else {
		//var selectedPassengers = document.getElementsByName("selectedPassengers");
		var selectedPassengers = document.forms[0].selectedPassengers;
		if( selectedPassengers != null ){
			if( selectedPassengers.length ){
				for( ii = 0; ii < selectedPassengers.length; ii++ ){
					passengerCount++;
				}
			} else {
				passengerCount++;
			}
		}
	}
	
	for(idx = 0; idx < adultCompanion.length; idx++){
		if(adultCompanion[idx].parentNode.style.display != "none" && adultCompanion[idx].value == ""){
			return false;
		}
	}

	
	if( ( passengerCount - infantCount - twelveOrOlderCount) < infantCount ){
		return false;
	}
	
	return true;
}


function selectRecordLocatorProcessContinue() {

	var contEnab = document.getElementById("continueEnabled");
	var contDis = document.getElementById("continueDisabled");
	if (hasRecordLocatorSelected()) {
		if (contEnab != null) {
			contEnab.style.display = "inline";
		}
		if (contDis != null) {
			contDis.style.display = "none";
		}
	} else {
		if (contEnab != null) {
			contEnab.style.display = "none";
		}
		if (contDis != null) {
			contDis.style.display = "inline";
		}
	}
}

function hasRecordLocatorSelected() {

	var selectRecordLocators = document.forms[0].selectRecordLocators;
	
/*	if( selectRecordLocators == null ){
		return true;
	}*/
	
	if (selectRecordLocators.length) {
		for ( var i = 0; i < selectRecordLocators.length; i++) {
			if (document.forms[0].selectRecordLocators[i].checked == true) {
				return true;
			}
		}
	} else {
		if (selectRecordLocators.checked == true) {
			return true;
		}
	}
	return false;
}

function checkAllRecordLocators(selAllObj) {
	var selRecordLocators = document.getElementsByName("selectRecordLocators");
	if (selRecordLocators != null) {
		if (selRecordLocators.length) {
			for ( var ii = 0; ii < selRecordLocators.length; ii++) {
				selCheckRecordLocators(selRecordLocators[ii], selAllObj.checked);
			}
		} else {
			selCheckRecordLocators(selRecordLocators, selAllObj.checked);
		}
	}
}

function selCheckRecordLocators(selRecordLocators, checked) {
	if (selRecordLocators != null) {
		selRecordLocators.checked = checked;
		//selectRecordLocators(selRecordLocators, selRecordLocators.value);
		selectRecordLocatorProcessContinue();
	}
}

function cancelRecordLocator(){
	if(validateSelectedRecordLocator()){
	if(confirm("Are you sure you wish to cancel this Record Locator?")){
		document.forms[0].submit();
	}
	}else{
		alert("Select the record locators you want to cancel.");
	}
}

function validateSelectedRecordLocator(){
	var hasSelected = false;
	
	var selectRecordLocatorsArr = document.getElementsByName("selectRecordLocators");
	if(selectRecordLocatorsArr != null){
		for(var indexCounter = 0;indexCounter < selectRecordLocatorsArr.length; indexCounter++){
			if(selectRecordLocatorsArr[indexCounter].checked == true){
				hasSelected = true;
				break;
			}
		}
}

	return hasSelected;
}

function viaCheck(searchType){

	if(searchType=='flight'){
		return true;
	}
		
	var leaveTime = document.forms[0].leaveTime;
	var returnTime = document.forms[0].returnTime;
	var viaAirport = document.forms[0].viaAirport;
	
	var viaEnable = document.getElementById("viaEnable");
	var viaDisable = document.getElementById("viaDisable");
	var oneWay = document.forms[0].tripWay[1].checked;
		
	if( (leaveTime.value == 'D') || (!oneWay && !returnTime.disabled && returnTime.value == 'D') ) {	
		if (viaAirport.value != '' && viaAirport.value != null){
			alert("Flight Inquiry for 'All Direct Flights' is not allowed when searching using the VIA option. Update your search and try again.");
			//viaAirport.value = '';
			return false;
		}
			viaAirport.value = '';

		return true;
	} else {
		return true;
	}
}

/* rqb 20161026 DeltaSpirit3 */
function viaCheckForEAT(){
	
	var leaveTime = document.forms[0].leaveTime;
	var returnTime = document.forms[0].returnTime;
	var outboundVia = document.forms[0].outboundVia;
	var returnVia = document.forms[0].returnVia;
	
	var oneWay = document.forms[0].tripWay[1].checked;
		
	if((leaveTime.value == 'D' && outboundVia.value != '' && outboundVia.value != null) || 
			(returnTime.value == 'D' && returnVia.value != '' && returnVia.value != null)) {	
		alert("Flight Inquiry for 'All Direct Flights' is not allowed when searching using the VIA option. Update your search and try again.");
		return false;
	} else {
		return true;
	}
}
		
function goToInterlineTravel(){
	document.forms[0].action = "interlineTravelAction.action";
	document.forms[0].submit();
}

function selectChangeListing(){
	
		if( validatePassengersSelected() ){
			showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
			document.forms[0].submit();
		}
	
}

function validatePassengersSelected(){

	var selectedPassengerCount = 0;

	var selectPassengerArray = document.getElementsByName("selectPassengers");
	if(selectPassengerArray != null ){
		for (var counter = 0; counter < selectPassengerArray.length; counter++) {
			if (selectPassengerArray[counter].checked == true){
				selectedPassengerCount++;
			}
		}
	}
	
	if( selectedPassengerCount < 1 ){
		alert("Please select passengers to process");
		return false;
	}
	return true;
}


// function provided by Ashutosh Tripathi
function getObject(objectId) {
		// check w3c DOM, then IE, then Netscape
		if(document.getElementById && document.getElementById(objectId))
			return document.getElementById(objectId);
		else if(document.all && document.all(objectId))
			return document.all(objectId);
		else if(document.layers && document.layers[objectId])
			return document.layers[objectId];
		else
			return null;
}

function cleanUpPhoneNumberField(){
	var phoneNumber = document.getElementById("phoneNumber");
	if(phoneNumber!= null && phoneNumber.value != ""){
		phoneNumber.value = phoneNumber.value.replace(/-/g, "");
	}
}

//EJS 0907  tsa secure flt
function validateTsaSecureName(carrier) {
		//addTsaSecureInfo();
		submitTSAInfo();
	
}

function agreeTSAInfo() {
	if (document.forms[0].agreeTSAInfo.checked) {
		document.forms[0].agreeTSAInfo.value = "true";
		return true;
	} else {
		document.forms[0].agreeTSAInfo.value = "false";
	}
	return false;
}

function submitTSAInfo() {
	if( validateSecureFlightForm() ){
		//jc Fix for QC 1407
		document.getElementById("continueEnabled").style.display = "none";
		if(document.getElementById("continueDisabled") != null){			
		document.getElementById("continueDisabled").style.display = "inline";
		}
		//end

		//tlpa 20120316- Puppy_Dawgs QC 1444 - start
		var splashText = PLEASE_WAIT_TEXT; //aay 20150817 - QC 2751
		//tlpa 20120316- Puppy_Dawgs QC 1444 - end
		splashText += "<br><span class=\"smallText\">";
		splashText += " This may take a few moments. Your patience is appreciated.";
		splashText += "</span>";
		showLoadingSplash(splashText);
		document.forms[0].submit();
	}
}
/* rqb 20160125 Alpha - removed, does not do anything
function addTsaSecureInfo() {

	var passengerCount = 0;
	var counter = document.forms[0].newFirstName.length;
	
	for ( var i = 0; i < counter; i++) {
		var fname = document.forms[0].newFirstName[i].value;
		var mname = document.forms[0].newMiddleName[i].value;
		var lname = document.forms[0].newLastName[i].value;
		var bday = document.forms[0].birthDate[i].value;
		var selIdx = document.forms[0].gender[i].selectedIndex;
        var gender = document.forms[0].gender[i].options[selIdx].value;
		var redress = document.forms[0].redressNbr[i].value;
	}
}*/

function tsaSecureLearnMorePopup() {
	var theTop = (screen.height / 2) - (210 / 2);
	var theLeft = (screen.width / 2) - (500 / 2);
	var features = 'height=' + 140 + ',width=' + 500 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=no";
	var stringUrl = "tsaSecureLearnMore.action";

	window.open(stringUrl, "TsaSecureLearnMore", features);
}

// EJS 201106 added for RIAN  
function tsaSecureKTLearnMorePopup() {
	var theTop = (screen.height / 2) - (210 / 2);
	var theLeft = (screen.width / 2) - (500 / 2);
	var features = 'height=' + 140 + ',width=' + 500 + ',top=' + theTop
			+ ',left=' + theLeft + ",scrollbars=no";
	var stringUrl = "tsaSecureKTLearnMore.action";

	window.open(stringUrl, "TsaSecureKTLearnMore", features);
}

function setSearchType(searchType){
	document.forms[0].searchType.value = searchType;
}

function setSearchFlag(searchFlag){
	document.forms[0].searchFlag.value = searchFlag;
}

/**
 * This function is for use with the fly confirmed discount program fare quote page.
 * This sets the size of the target table to be the same as that of the reference table.
 * 
 */
function setTargetTableWidth(){
	
	var table = document.getElementById("referenceTable");
	var thead = table.getElementsByTagName("thead");
	var tr = thead[0].getElementsByTagName("tr");
	var th = tr[0].getElementsByTagName("th");

	var targetTable = document.getElementById("targetTable");
	var targetTr = targetTable.getElementsByTagName("tr");

	for (x=0; x<targetTr.length; x++){
		var targetTd = targetTr[x].getElementsByTagName("td");
		for (y=0; y<targetTd.length;y++){
			targetTd[y].style.width = th[y].offsetWidth+'px';
		}
	}
}

function hideContinueButton(){
	var contEnab = document.getElementById("continueEnabled");
	var contDis = document.getElementById("continueDisabled");
	contEnab.style.display = "none";
	contDis.style.display = "inline";
}

function unhideContinueButton(){
	var contEnab = document.getElementById("continueEnabled");
	var contDis = document.getElementById("continueDisabled");
	contEnab.style.display = "inline";
	contDis.style.display = "none";	
}

function showRefundPage(){
	//document.forms[0].action = "showTicketRefund.do";
	location.href="showTicketRefund.action";
}

function createOneGreatTeamReservation(){
	if (validateOneGreatTeamReservationForm()){
		if( showLoadingSplash(PLEASE_WAIT_TEXT)){ //aay 20150817 - QC 2751
			document.forms[0].submit();
		}		
	}
}

function createNewDayReservation(){
	if (validateNewDayReservationForm()){
		if( showLoadingSplash(PLEASE_WAIT_TEXT)){ //aay 20150817 - QC 2751
			document.forms[0].submit();
		}		
	}
}

function createSkyTeamSummerRewardsReservation(){
	if (validateSkyTeamSummerRewardsReservationForm()){
		if( showLoadingSplash(PLEASE_WAIT_TEXT)){ //aay 20150817 - QC 2751
			document.forms[0].submit();
		}		
	}
}

function validateOneGreatTeamReservationForm() {
	var reserveForm = document.forms[0];
	if (reserveForm == null) {
		return false;
	}
	if(!validateSelectedPassenger('','','oneGreatTeam')){
		return false;
	}else if (!setInfantRequestDetails('nonrev')){// aay
		return false;
	}
	
	if (!validPhoneNumber(reserveForm.phoneNumber)) {
		return false;
	}
	
	if(!validEmailAddress(reserveForm.email)){
		return false;
	}		

	if(checkYieldFare()){
		if(checkForAllDuplicates(reserveForm.phoneNumber)){
		return false;
	}
	}
	
	if( reserveForm.selectPassengers == null ){
		return true;
	}
	
	if (nothingChecked(reserveForm.selectPassengers)) {
		alert("Please select passengers by checking on the checkbox");
		if (reserveForm.selectPassengers[0]) {
			reserveForm.selectPassengers[0].focus();
		}
		return false;
	}
	
	if( !infantNotAlone() ){
		alert("Infant/s without a seat must be listed/associated with at least one adult passrider.");
		return false;
	}
	
	return true;
}

function validateNewDayReservationForm() {
	var reserveForm = document.forms[0];
	if (reserveForm == null) {
		return false;
	}
	if(!validateSelectedPassenger('','','newDay')){
		return false;
	}else if (!setInfantSsrDetails('nonrev')){
		return false;
	}
	
	if (!validPhoneNumber(reserveForm.phoneNumber)) {
		return false;
	}
	
	if(!validEmailAddress(reserveForm.email)){
		return false;
	}		

	if(checkYieldFare()){
		if(checkForAllDuplicates(reserveForm.phoneNumber)){
		return false;
	}
	}
	
	if( reserveForm.selectPassengers == null ){
		return true;
	}
	
	if (nothingChecked(reserveForm.selectPassengers)) {
		alert("Please select passengers by checking on the checkbox");
		if (reserveForm.selectPassengers[0]) {
			reserveForm.selectPassengers[0].focus();
		}
		return false;
	}
	
	if( !infantNotAlone() ){
		alert("Infant/s without a seat must be listed/associated with at least one adult passrider.");
		return false;
	}
	
	return true;
}

function validateSkyTeamSummerRewardsReservationForm() {
	var reserveForm = document.forms[0];
	if (reserveForm == null) {
		return false;
	}
	if(!validateSelectedPassenger('','','skyTeamSummerRewards')){
		return false;
	}else if (!setInfantSsrDetails('nonrev')){
		return false;
	}
	
	if (!validPhoneNumber(reserveForm.phoneNumber)) {
		return false;
	}
	
	if(!validEmailAddress(reserveForm.email)){
		return false;
	}		

	if(checkYieldFare()){
		if(checkForAllDuplicates(reserveForm.phoneNumber)){
		return false;
	}
	}
	
	if( reserveForm.selectPassengers == null ){
		return true;
	}
	
	if (nothingChecked(reserveForm.selectPassengers)) {
		alert("Please select passengers by checking on the checkbox");
		if (reserveForm.selectPassengers[0]) {
			reserveForm.selectPassengers[0].focus();
		}
		return false;
	}
	
	if( !infantNotAlone() ){
		alert("Infant/s without a seat must be listed/associated with at least one adult passrider.");
		return false;
	}
	
	return true;
}


//***validate Travel Companion***//
function validateTravelCompanionInfo(){
	var noErrors = true;
	errorMsg="";
	
	if (document.forms[0].agree.checked == false) {		
		errorMsg = "You must agree in order to proceed.";
		noErrors = false;
	}

	if(! validateCompanionPhoneNumbers())		noErrors = false; 
	if(! validateBirthdate())			noErrors = false; 
	if(! validateGender())				noErrors = false;
	if(! validateZip())					noErrors = false; 
	if(! validateState())				noErrors = false; 
	if(! validateCity())				noErrors = false; 
	if(! validateAddress2())			noErrors = false; 
	if(! validateAddress())				noErrors = false; 
	if(! validateLastName())			noErrors = false; 
	if(! validateMiddleName())			noErrors = false; 
	if(! validateFirstName())			noErrors = false;

	if (noErrors) {
		document.forms[0].submit();
	} else {
		alert(errorMsg);
	}		
}

var errorMsg = "";

function validateBirthdate() {
	var noErrors = true;
	// Birthdate must be given
	if(document.forms[0].birthday == null || document.forms[0].birthday.value == "") {
		document.forms[0].birthday.focus();	   			 			
		errorMsg = "Birth Date is required.\n" + errorMsg;
		noErrors = false;			
	}else if (!checkBirthDateFormat(document.forms[0].birthday, "", false)){
		errorMsg = "Invalid date.\n\n"+"The correct format is: mm/dd/yyyy\n"+"Example: 02/29/2000\n" + errorMsg;
		document.forms[0].birthday.focus();	   			 			
		noErrors = false;							
	}
	return noErrors;
}

function validateCompanionPhoneNumbers() {
	var noErrors = true;
		// At least one phone number must be given, and it must be numeric
	var phoneNum = true;
	var phoneNumLength = true;
	if ((document.forms[0].homePhone == null || document.forms[0].homePhone.value == "")
	&& (document.forms[0].workPhone == null || document.forms[0].workPhone.value == "")
	&& (document.forms[0].mobilePhone == null || document.forms[0].mobilePhone.value == "")) {		
		errorMsg = "At least one phone number is required.\n" + errorMsg;
		document.forms[0].homePhone.focus();	   			 			
		noErrors = false;  	
	}else {
		// Phone number(s) must be numeric
		if (document.forms[0].mobilePhone != null && document.forms[0].mobilePhone.value != "") {		
			if (!checkIfNumeric(document.forms[0].mobilePhone)) {
	   			document.forms[0].mobilePhone.focus();		
	   			phoneNum = false;	
			}
			if (document.forms[0].mobilePhone.value.length <= 9 || document.forms[0].mobilePhone.value.length > 15){
				phoneNumLength = false;
			}
		}
		if (document.forms[0].workPhone != null && document.forms[0].workPhone.value != "") {		
			if (!checkIfNumeric(document.forms[0].workPhone)) {		
	   			document.forms[0].workPhone.focus();		
	   			phoneNum = false;	
			}
			if (document.forms[0].workPhone.value.length <= 9 || document.forms[0].workPhone.value.length > 15){
				phoneNumLength = false;
			}
		}
		if (document.forms[0].homePhone != null && document.forms[0].homePhone.value != "") {
			if (!checkIfNumeric(document.forms[0].homePhone)) {							
	   			document.forms[0].homePhone.focus();
	   			phoneNum = false;	
			}
			if (document.forms[0].homePhone.value.length <= 9 || document.forms[0].homePhone.value.length > 15){
				phoneNumLength = false;
			}
		}
		
	}
		
	if (!phoneNum) {		
		errorMsg = "All phone numbers must be numeric.\n\n"+"Example: 4041234567\n" + errorMsg;
		noErrors = false; 			   							
	}
	if (!phoneNumLength){
		errorMsg = "Please enter a valid phone number.\n" + errorMsg;
		noErrors = false; 
	}
	return noErrors;					
}

function validateState() {
	var noErrors = true;
		// State must be provided if the Country code is US, USA or CAN
	if ((document.forms[0].country.value == "US" || document.forms[0].country.value == "USA"
	|| document.forms[0].country.value == "CAN") && (document.forms[0].state.value == "" || document.forms[0].state.value == "N/A"  )) {
		errorMsg = "State is required.\n" + errorMsg;
		document.forms[0].state.focus();	
		noErrors = false;				
	}	
	return noErrors;
}

function validateZip() {
	var noErrors = true;
		// Postal Code must be provided if the Country code is US, USA or CAN,
		// otherwise it is optional.
	if ((document.forms[0].country.value == "US" || document.forms[0].country.value == "USA"
	|| document.forms[0].country.value == "CAN") && (document.forms[0].postalCode == null 
	|| document.forms[0].postalCode.value == "" || checkForSpace(document.forms[0].postalCode))) {
		errorMsg = "Postal Code is required.\n" + errorMsg;
		document.forms[0].postalCode.focus();	
		noErrors = false;		
	}
	//mia 20100827 postal field validation start
	else if ( (document.forms[0].postalCode.value != null &&  document.forms[0].postalCode.value != "") &&
			(document.forms[0].country.value == "US" || document.forms[0].country.value == "USA")&&
			!checkIfNumeric(document.forms[0].postalCode)){
		errorMsg = "Postal Code must be numeric.\n" + errorMsg;			
	}
	//mia 20100827 postal field validation end
	else {
		if (!checkIfAlphaNumHyphen(document.forms[0].postalCode)) {	
			errorMsg = "Postal Code must be alpha numeric.\n" + errorMsg;
   			document.forms[0].postalCode.focus();	
   			noErrors = false;	
		}	   			
	}		
	return noErrors;
}

function validateCity() {
	var noErrors = true;			
	if (document.forms[0].city == null || document.forms[0].city.value == "") {		
		errorMsg = "City is required.\n" + errorMsg;
		document.forms[0].city.focus();
		noErrors = false;	
	}else {
		if (!checkIfAlphaHyphen(document.forms[0].city)) {		
			errorMsg = "City name must be alphabetic or hyphen.\n" + errorMsg;
			document.forms[0].city.focus();
   			noErrors = false;
		}	
	}	
	return noErrors;
}

function validateAddress2() {
	var noErrors = true;									
	if (!checkIfAlphaNumHyphenPeriod(document.forms[0].address2)) {		
		errorMsg = "Addresses must be alpha numeric or hyphen or period.\n" + errorMsg;
		document.forms[0].address2.focus();
		noErrors = false;
	}	   			
	return noErrors;
}

function validateAddress() {
	var noErrors = true;								
	if (document.forms[0].address == null || document.forms[0].address.value == "") {		
		errorMsg = "Address is required.\n" + errorMsg;
		document.forms[0].address.focus();
		noErrors = false;	
	}else {
		if (!checkIfAlphaNumHyphenPeriod(document.forms[0].address)) {		
			errorMsg = "Addresses must be alpha numeric or hyphen or period.\n" + errorMsg;
			document.forms[0].address.focus();
   			noErrors = false;
		}	   			
	}
	return noErrors;
}

function validateLastName() {
	var noErrors = true;			
	if (document.forms[0].lastName == null || document.forms[0].lastName.value == ""
	|| checkForSpace(document.forms[0].lastName)) {				
		errorMsg = "Last Name is required.\n" + errorMsg;
		document.forms[0].lastName.focus();	 
		noErrors = false;	   			  			 			
	}else {
		// Remove any leading, trailing or embedded spaces to keep Pass 
		// database in sync with Deltamatic.
		removeSpace(document.forms[0].lastName);	
		// Then check the field length and check for valid characters
		if (document.forms[0].lastName.value.length < 2) {
			errorMsg = "Last Name must be at least 2 characters.\n" + errorMsg;
   			document.forms[0].lastName.focus();	  
   			noErrors = false;	   			 			 			
		}else {
	   		// Deltamatic does not allow any leading, embedded or trailing spaces 
	   		// and hyphens in last name.   			
			if (!checkIfAlphaNoSpace(document.forms[0].lastName)) {			
				errorMsg = "Last Name must be alphabetic.\n" + errorMsg;
	   			document.forms[0].lastName.focus();	   			 			
	   			noErrors = false;
			}	   			
		}
	}
	return noErrors;
}

function validateMiddleName() {
	var noErrors = true;
	if (!checkIfAlpha(document.forms[0].middleName)) {		
		errorMsg = "Middle initial must be alphabetic.\n" + errorMsg;
		document.forms[0].middleName.focus();	   			 			
		noErrors = false; 
	}			
	return noErrors;
}

function validateFirstName() {
	var noErrors = true;			
	if (document.forms[0].firstName == null || document.forms[0].firstName.value == ""
	|| checkForSpace(document.forms[0].firstName)) {				
		errorMsg = "First Name is required.\n"+errorMsg;
		document.forms[0].firstName.focus();  			 			
		noErrors = false;	
	}else {
		// Remove any leading, trailing or embedded spaces to keep Pass 
		// database in sync with Deltamatic.
		removeSpace(document.forms[0].firstName);		
   		// Deltamatic does not allow any leading, embedded or trailing spaces, 
   		// and hyphens in first name.  	   			
		if (!checkIfAlphaNoSpace(document.forms[0].firstName)) {	
			errorMsg = "First name must be alphabetic.\n" + errorMsg;
   			document.forms[0].firstName.focus();	  
   			noErrors = false; 	
   		}		
	}
	return noErrors;
}

function validateGender() {
	var noErrors=true;
	if(document.forms[0].gender==null || document.forms[0].gender.value=='') {
		noErrors = false;
		errorMsg = "Gender is required.";
		document.forms[0].gender.focus();
	}
	return noErrors;
}

//***end validate Travel Companion***//

function clearTravelCompanionFields(){
	document.forms[0].firstName.value = "";
	document.forms[0].middleName.value = "";
	document.forms[0].lastName.value = "";
	document.forms[0].suffix.value = "";
	document.forms[0].address.value = "";
	document.forms[0].address2.value = "";
	document.forms[0].city.value = "";
	document.forms[0].state.value = "N/A";
	document.forms[0].state.disabled = false;
	document.forms[0].postalCode.value = "";
	document.forms[0].country.value = "USA";
	document.forms[0].gender.value = "";
	document.forms[0].birthday.value = "";
	document.forms[0].homePhone.value = "";
	document.forms[0].workPhone.value = "";
	document.forms[0].mobilePhone.value = "";
	document.forms[0].agree.checked = false;
}

function formOfPayment(type){	
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
	if(type =='OGT'){
		document.forms[0].action = "oneGreatTeamCreditCardPayment.action";
	}else if(type == 'newDay') {
		document.forms[0].action = "newDayCreditCardPayment.action";
	}else if(type == 'skyTeamSummerRewards') {
		document.forms[0].action = "skyTeamSummerRewardsCreditCardPayment.action";
	}else if(type == 'ogtChange') {
		document.forms[0].action = "oneGreatTeamReissueCreditCardPayment.action";
	}else if(type == 'ndChange') {
		document.forms[0].action = "newDayReissueCreditCardPayment.action";
	}else if(type == 'srChange') {
		document.forms[0].action = "skyTeamSummerRewardsReissueCreditCardPayment.action";
	}
	document.forms[0].submit();
}

function manualRefund(){
	var errorMessage = "";
	var invalidEmail = false;
	var email1 = trim(document.forms[0].email1.value);
	var email2 = trim(document.forms[0].email2.value);
	
	if (checkNull(email1)) {
		errorMessage += "Email is required.\n";
		document.forms[0].email1.focus();
	} else if (!validateEmailAddress2(email1)) {	
		errorMessage += "Please enter a valid email address.\n";
		invalidEmail = true;
		document.forms[0].email1.focus();
	}
	
	if (checkNull(email2)) {
		errorMessage += "Re-entered email is required.\n";
		document.forms[0].email2.focus();
	} else if (!validateEmailAddress2(email2)) {	
		errorMessage += "Please re-enter a valid email address. \n\n";
		invalidEmail = true;
		document.forms[0].email2.focus();
	}
	
	if(invalidEmail){
		errorMessage += "Note: *Only a single of valid sender email is allowed.\n";
	}
	
	if(errorMessage.length > 1 || (invalidEmail==false && errorMessage.length > 1)){
		alert(errorMessage);
		return;
	}
	
	if (email1 != email2){
		alert("The email addresses entered do not match.  Please correct and re-submit your request.");
		return;
	} else{
		document.forms[0].emailAddress.value = email1;
		document.forms[0].action = "awardTravelConfirmRefund.action";
		document.forms[0].submit();
	}

}

function dynamicPopupAirportList(airportInputId, inTarget){
	var element = document.getElementById(airportInputId);
	var stringFunction = "showExpandedAirportHelp('" + inTarget+"', event)";
	element.onclick = new Function(stringFunction);
}

function validateCapacity(capacity){
	capacity.value = trim(capacity.value);
	if (capacity.value == '' || !checkIfNumericValue(capacity.value)){
		capacity.value = '85';
	}
}

function validateFareQuoteChoice(){
	var selected;
	if(typeof document.forms[0].flyConfirmedFareQuote.length == "undefined"){
		if(document.forms[0].flyConfirmedFareQuote.checked){
			selected = true;
		}
	}else{
		for (var x = 0; x < document.forms[0].flyConfirmedFareQuote.length; x++) {
			if(document.forms[0].flyConfirmedFareQuote[x].checked){
				selected = true;
			}
		}
	}
	
	if (selected) {
		document.forms[0].submit();
	} else {
		alert("Please select a fare before continuing.");
	}	

}

//mia Fix for QC 1658 Crew Secured Flights
function validateTsaSecureNameForCrew(){
	//addTsaSecureInfo();
	if( validateSecureFlightForm() ){
		document.getElementById("continueEnabled").style.display = "none";
		document.getElementById("continueDisabled").style.display = "inline";
		
		var splashText = PLEASE_WAIT_TEXT; //aay 20150817 - QC 2751
		splashText += "<br><span class=\"smallText\">";
		splashText += " This may take a few moments. Your patience is appreciated.";
		splashText += "</span>";
		showLoadingSplash(splashText);
		document.forms[0].submit();
	}	
}
//mia end

//mia 20100818 fix for QC-1776
function appendZeroes(field){
		
	if(field != null && field.value !="" && checkIfNumeric(field) ){
		var fieldValue = field.value;
		if(fieldValue.length ==4){
			field.value=fieldValue;
		}else if(fieldValue.length ==3){
			fieldValue ="0"+fieldValue;
			field.value=fieldValue;
		}else if(fieldValue.length ==2){
			fieldValue = "00"+fieldValue;
			field.value=fieldValue;
		}else{
			fieldValue = "000"+fieldValue;
			field.value=fieldValue;
		}
		
	}		
} 
function checkForValidEmail(emailString) {
	at = emailString.indexOf('@');	
	user_name = emailString.substr(0, at);
	domain_name = emailString.substr(at + 1, emailString.length);
	dot = domain_name.indexOf('.');
	//mia 20111020 - QC Braves 1750
	if(at == -1 || at == 0 || dot == -1 || dot == (emailString.length - 1) || dot == (emailString.length - 2)){
			return false;
	} 
	if(validateEmailString(user_name) === false || validateEmailString(domain_name) === false){
	   return false;                     
	}
	if(validateConsecutiveSpecialChar(domain_name) === false){
	   return false;                     
	}	
 	return true;					
}

function validateConsecutiveSpecialChar(str){
	emailString = trim(str);
	var invalidChars = "-_.^~ ";
	for ( var i = 0; i < emailString.length; i++) {		
		if(i+1 < emailString.length){
			var currentChar = emailString.charAt(i); 
			var nextChar = emailString.charAt(i+1); 
			if(currentChar == nextChar && invalidChars.indexOf(currentChar) != -1 ){
				return false;
			}else if(invalidChars.indexOf(currentChar) != -1   && invalidChars.indexOf(nextChar) != -1 ){
				return false;
			}
		}
	}
	if(invalidChars.indexOf(emailString.charAt(emailString.length-1)) != -1){
		return false;
	}
	return true;
}

function printAwardTravelHistory(){
	window.showModalDialog("viewAwardTravelHistory.action?event=print",
			"printTravelHistory", "dialogWidth:850px");
}

function editCompanionInfo(){
	var form = document.forms[0];
	form.action = "addTravelCompanion.action?action=edit";
	form.submit();	
}

function enterKeySearch(key_val){
	/* rqb 20161026 DeltaSpirit3 */
	if(event.keyCode == 13 && ( document.activeElement.id == null
		|| document.activeElement.id ==	''
		|| document.activeElement.id == 'outboundFrom' 
		|| document.activeElement.id ==	'outboundTo' 
		|| document.activeElement.id ==	'outboundVia' 
		|| document.activeElement.id == 'returnFrom' 
		|| document.activeElement.id ==	'returnTo' 
		|| document.activeElement.id ==	'returnVia' 
		|| document.activeElement.id ==	'leaveDate' 
		|| document.activeElement.id ==	'leaveTime' 
		|| document.activeElement.id ==	'returnDate' 
		|| document.activeElement.id ==	'returnTime'
	))
	{		
		awardTravelSubmitSearch(false);	
	}
}

function checkActiveElement(key_val){	
	if(event.keyCode == 9){
		var input = document.activeElement.id;
		if(input == null || input == ""){	
			/* rqb 20161026 DeltaSpirit3 */
			if(document.forms[0].outboundFrom != null){
				document.forms[0].outboundFrom.focus();	
			}		
		}else{
			document.getElementById(input).focus();
		}	
	}	
}

function checkActiveElementChange(key_val){	
	if(event.keyCode == 9){
		var input = document.activeElement.id;		
		if(input == null || input == ""){
			checkFocus();
		}else{
			document.getElementById(input).focus();						
		}	
	}	
}

function checkFocus(){
	var fromAirport = document.forms[0].fromAirport;
	var toAirport = document.forms[0].toAirport;	
  try
  {
	fromAirport.focus();
  }	catch(err){
	 try{
		toAirport.focus();
	 }catch(err2){
		if(document.forms[0].viaAirport != null){
			document.forms[0].viaAirport.focus();
		}	
	 }
  }	
}

function tabbingOnBlur(){
	if(document.forms[0].selectPassengers != null && document.forms[0].selectPassengers.length > 1){
		document.forms[0].selectPassengers[0].focus();
	}else if(document.forms[0].selectPassengers != null){
		document.forms[0].selectPassengers.focus();
	}
}

// Check for alphabetic only (no special characters or space)
function checkIfAlphaNoSpace(fieldObject)
{    
	var validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	return checkChars(fieldObject, validChars);
}

// Check for only space in an input form field (1 or more space characters)
function checkForSpace(fieldObject)
{    
	strValue = fieldObject.value;
	onlySpace = false;
	for (var i=0; i < strValue.length; i++)	{
		if (strValue.charAt(i) == " ") {
			onlySpace = true;
		}
		else {		// return false as soon as a non-space char is found
			return false;		
		}
	}
	// if there are only spaces in the field, remove them
	if (onlySpace) {
		fieldObject.value = "";
	}
	return onlySpace;
}

//rqb 20101223 Astros QC 837 start
function trimBoth(str){
	return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
}
//rqb 20101223 Astros QC 837 end

//dgg 20110603 - Astros QC 933 start
function openDeltaChangeSeat(str, from){
	deltaPage = window.open(str);
	while(!deltaPage.closed)
	{
	}
	if (from == 'confirmPage'){
	location.href = "companyBusinessReservationDetails.action?confirmationNumber="+document.forms[0].confirmationNumber.value;
	}else if (from == 'myListings'){
		document.forms[0].listType.value = "Company Business";
		document.forms[0].action = "myReservationsDLListingDetails.action";
		document.forms[0].submit();
		//location.href = "myReservationsDLListingDetails.do?confirmationNumber="+document.forms[0].confirmationNumber.value;
	}
}
//dgg 20110603 - Astros QC 933 end

//mia 20110603 - Astros QC 853
function cobusTravelAlertSubmit(){
	var motherPage = window.dialogArguments;
	motherPage.location.href="javascript:submitReservation()"; 
	window.close();
}
//mia 20110603 - Astros QC 853 end

//rqb 20111001 - Braves QC 1856 start
function confirmReservation(activeMenu) {
	hideLayeredPopup();
	showLoadingSplash(PLEASE_WAIT_TEXT); //aay 20150817 - QC 2751
	if (activeMenu == 'oneGreatTeam'){
		document.forms[0].action = "oneGreatTeamConfirmReservation.action";
	}
	if (activeMenu == 'newDay'){
		document.forms[0].action = "newDayConfirmReservation.action";
	}
	if (activeMenu == 'skyTeamSummerRewards'){
		document.forms[0].action = "skyTeamSummerRewardsConfirmReservation.action";
	}
	document.forms[0].submit();	
}
//rqb 20111001 - Braves QC 1856 end

//rqb 20120522 Dawgs QC 2250 start
function setResultsDateNavArrows(flightNum) {
	var leaveDate = document.getElementById("leaveDate");
	var flightLeaveDate = document.getElementById("flightLeaveDate");
	var returnDate = document.getElementById("returnDate");
	
	if(flightNum != null && flightNum != "" && flightLeaveDate != null){
		setArrows(flightLeaveDate, "outboundPrev", "outboundPrevImg", "outboundNext", "outboundNextImg");
	}else{
		if(leaveDate != null){
			setArrows(leaveDate, "outboundPrev", "outboundPrevImg", "outboundNext", "outboundNextImg");
		}
		if(returnDate != null){
			setArrows(returnDate, "returnPrev", "returnPrevImg", "returnNext", "returnNextImg");
		}
	}
}

function setArrows(date, prevHref, prevImg, nextHref, nextImg){
	if (date != null){
		var currentDate = getDateValue(getDateAsString(new Date()));
		var baseDate = getDateValue(date.value);
		var hrefPrev = document.getElementById(prevHref);
		var hrefNext = document.getElementById(nextHref);
		var imgPrev = document.getElementById(prevImg);
		var imgNext = document.getElementById(nextImg);
		
		if((baseDate - currentDate) <= -1 && hrefPrev != null){
			hrefPrev.href="javascript:void(0);";
			hrefPrev.style.cursor="default";
			imgPrev.src="images/leftArrow_disabled.gif";
			imgPrev.alt="";
		}else if ((baseDate - currentDate) >= 331 && hrefNext != null){
			hrefNext.href="javascript:void(0);";
			hrefNext.style.cursor="default";
			imgNext.src="images/rightArrow_disabled.gif";
			imgNext.alt="";
		}
	}
}

function setFcdpResultsNavArrows(){
	var searchForm = document.forms[0];
	if (searchForm == null) {
		return false;
	}
	var leaveDates = searchForm.leaveDates;
	var flightNumbers = searchForm.flightNumbers;
	
	for(var counter = 0; counter < flightNumbers.length; counter++ ){
		var leaveDate = leaveDates[counter];
		setArrowsFcdp(leaveDate, counter);
	}
}

function setArrowsFcdp(date, counter){
	if (date != null){
		var prevLeave = document.getElementById("prevLeave"+(counter+1));
		var prevLeaveImg = document.getElementById("prevLeaveImg"+(counter+1));
		var nextLeave = document.getElementById("nextLeave"+(counter+1));
		var nextLeaveImg = document.getElementById("nextLeaveImg"+(counter+1));

		var currentDate = getDateValue(getDateAsString(new Date()));
		var baseDate = getDateValue(date.value);

		if((baseDate - currentDate) <= -1 && prevLeave != null){
			prevLeave.href="javascript:void(0);";
			prevLeave.style.cursor="default";
			prevLeaveImg.src="images/leftArrow_disabled.gif";
			prevLeaveImg.alt="";
		}else if ((baseDate - currentDate) >= 331 && nextLeave != null){
			nextLeave.href="javascript:void(0);";
			nextLeave.style.cursor="default";
			nextLeaveImg.src="images/rightArrow_disabled.gif";
			nextLeaveImg.alt="";
		}
	}
}
//rqb 20120522 Dawgs QC 2250 end

//nmb 201205 - Dawgs Calculators start
function calculateBuddyYieldFares(){
	var classCode = document.getElementsByName("classCode");
	classCodes = "";
	 
	for(var indexCounter = 0; indexCounter < classCode.length; indexCounter++){
		if (classCodes == ""){
			classCodes = classCode[indexCounter].value;
		}else{
			classCodes = classCodes + "," + classCode[indexCounter].value;
		}
	}		 		 
	
	//rqb 20131226 - Struts2 - dwr that calls an action class doesn't work in struts2
	//var stringUrl = "/showBuddyYieldFareQuote.action?classCodes=" + classCodes;
	//showPageInPopup("",stringUrl,"1000","");
	var stringUrl = "/WEB-INF/jsps/popup/calculatorFareQuotePopup.jsp?classCodes=" + classCodes;
	showBuddyCalcInPopup("",stringUrl,"1000","");
}
//nmb 201205 - Dawgs Calculators end

//rqb 20131226 - Struts2 - dwr that calls an action class doesn't work in struts2
function showBuddyCalcInPopup(loadingMessage, pageURL, pageWidth, pageHeight, pageTop, pageLeft){
	showPopupSplash(loadingMessage);
	popLayer = document.getElementById("layeredPopup");

	if( popLayer != null && pageWidth != null && pageWidth != "" ){
		popLayer.style.width = parseInt(pageWidth);
	}
	if( popLayer != null && pageHeight != null && pageHeight != "" ){
		popLayer.style.height = parseInt(pageHeight);
	}
	if( popLayer != null && pageTop != null && pageTop != "" ){
		popLayer.style.top = parseInt(pageTop);
	} else if( popLayer != null && pageHeight != null && pageHeight != "" ){
		popLayer.style.top = ( parseInt(screen.height)/2  - parseInt(pageHeight) / 2 );
	} else if( popLayer != null ){
		popLayer.style.top = "200";
	}
	if( popLayer != null && pageLeft != null && pageLeft != "" ){
		popLayer.style.left = parseInt(pageLeft);
	} else if( popLayer != null && pageWidth != null && pageWidth != "" ){
		popLayer.style.left = ( parseInt(screen.width)/2 - parseInt(pageWidth) / 2 );
	} else if( popLayer != null ){
		popLayer.style.left = "200";
	}
	
	Popup.getBuddyYieldFareQuote(pageURL, function(data) {
		dwr.util.setValue("forward", data, { escapeHtml:false });
	    checkForTimeout("forward");
	    emptyPopupSplash();
	    showLayeredPopup();
	});
}


//*********DATE FUNCTIONS START***********
function checkValidDateFormat(dateToBeChecked, alertMessage){
	if(dateToBeChecked != null){
		dateString = dateToBeChecked.value;
		if(dateToBeChecked.value == null || dateToBeChecked.value == "" || dateToBeChecked.value == " "){
			dateToBeChecked.value = "";
			if (alertMessage != null && alertMessage != ""){
				alert(alertMessage);
			}
			return false;			
		}
		var checker = "1234567890";
		var dateParts = dateString.split("/");
		if (dateParts.length == 3) {
			var dd = dateParts[1];
			var mm = dateParts[0];
			var yyyy = dateParts[2];
			if ((!checkCharsValue(dd, checker)) || (!checkCharsValue(mm, checker))
					|| (!checkCharsValue(yyyy, checker))) {
				dateToBeChecked.value = "";
				if (alertMessage != null && alertMessage != ""){
					alert(alertMessage);
				}
				return false;
			}
			if (yyyy.length != 4){
				dateToBeChecked.value = "";
				if (alertMessage != null && alertMessage != ""){
					alert(alertMessage);
				}
				return false;
			}
			if(mm == 4 || mm == 6 || mm == 9 || mm == 11) {
				if(dd > 30) {
					dateToBeChecked.value = "";
					if (alertMessage != null && alertMessage != ""){
						alert(alertMessage);
					}
					return false;
				}
			}else if(mm == 2) {
				if(dd > 29) {
					dateToBeChecked.value = "";
					if (alertMessage != null && alertMessage != ""){
						alert(alertMessage);
					}
					return false;
				}
				if(dd == 29) {
					// check for leap year
					// a leap year is the year divisible by 4, exception: if year is divisible by 100 unless it's divisible also by 400
					if(yyyy%4 == 0) {
						if(yyyy%100 == 0) {
							if(yyyy%400 == 0) {
								// true leap year, 29 days are OK
							}else {
								dateToBeChecked.value = "";
								if (alertMessage != null && alertMessage != ""){
									alert(alertMessage);
								}
								return false; // none leap year
							}
						}
						// true leap year, 29 days are OK
					}
					else {
						dateToBeChecked.value = "";
						if (alertMessage != null && alertMessage != ""){
							alert(alertMessage);
						}
						return false; // none leap year
					}
				}
			}
			
			if (dd > 31 || dd < 1) {//(dd * 1)
				dateToBeChecked.value = "";
				if (alertMessage != null && alertMessage != ""){
					alert(alertMessage);
				}
				return false;
			} else if (mm > 12 || mm < 1) { //(mm * 1)
				dateToBeChecked.value = "";
				if (alertMessage != null && alertMessage != ""){
					alert(alertMessage);
				}
				return false;
			}
			
			return true;
		} else{
			dateToBeChecked.value = "";
			if (alertMessage != null && alertMessage != ""){
				alert(alertMessage);
			}
			return false;
		}
	}	
	return true;
}

function checkBirthDateFormat(field, alertMessage, isInfant) {
	var message = "";
	if (alertMessage != null && alertMessage != ""){
		message = "Please enter a valid date of birth.";
	}
	if (checkValidDateFormat(field, message)){
		var birthDate = new Date(field.value);
		var currDate = new Date();
		var years = 1000 * 60 * 60 * 24 * 365;
		var dateDifference = currDate.getTime()/years - birthDate.getTime()/years;
		if (isInfant){
			if (dateDifference >= 2){
				alert("The allowed age for infant is below 2 years old.");
				return false;
			}
		}
		if (dateDifference < 0){
			if (alertMessage != null && alertMessage != ""){
				alert(alertMessage);
			}
			return false;
		}
		return true;
	}else{
		return false;
	}
}

//el fix for QC 291
function returnDateValidation(){
	var leaveDate = document.getElementById("leaveDate");
	var returnDate = document.getElementById("returnDate");
	if(leaveDate != null && returnDate !=null){
		var leaveDt = leaveDate.value;
		var returnDt = returnDate.value;
		var baseDate = getDateValue(leaveDt);
		var compareDate = getDateValue(returnDt);
		if (baseDate > compareDate) {
			//rqb 20120524 Dawgs QC 2004
			alert('Return date cannot be earlier than depart date.');
			return true;
		}
	}
	return false;
}
//el end

//20120605 Dawgs QC 2004 & 2250 start
function validateSearchDate(inputDate){
	if (!checkValidDateFormat(inputDate,"Please enter a valid date.")){
		inputDate.value = getDateAsString(new Date());
		return false;
	}
	if (!withinDateLimit(inputDate)){
		return false;
	}
	return true;
}
//20120605 Dawgs QC 2004 & 2250 end

//rqb 20120510 Dawgs QC 2004 start
function copyLeaveDate(dateType){
	var leaveDate = document.getElementById("leaveDate");
	var returnDate = document.getElementById("returnDate");
	if(leaveDate != null && returnDate !=null){
		if (withinDateLimit(leaveDate)){
			var leaveDt = getDateValue(leaveDate.value);
			var returnDt = getDateValue(returnDate.value);
			if (leaveDt > returnDt) {
				if (dateType == 'leave' || dateType == 'EATleave'){
					returnDate.value = leaveDate.value;
				}
			}
		}
	}
}
//rqb 20120510 Dawgs QC 2004 end

//rqb 20120515 Dawgs QC 2250 start
function withinDateLimit(dateToBeChecked){
	if (dateToBeChecked != null){
		var currentDate = getDateValue(getDateAsString(new Date()));
		var baseDate = getDateValue(dateToBeChecked.value);	

		if (((baseDate - currentDate) > 331) || ((baseDate - currentDate) < -1)){
			alert("Flight information is only available for flights scheduled to depart yesterday, today, and future dates within the next 331 days.");
			return false;
		}
	}
	return true;
}
//rqb 20120515 Dawgs QC 2250 end

//el fix for QC 1260
function checkSearchDates(dateType){
	var searchForm = document.forms[0];
	var leaveDate = document.getElementById("leaveDate");
	var flightLeaveDate = document.getElementById("flightLeaveDate");
	var returnDate = document.getElementById("returnDate");
	
	//rqb 20120605 Dawgs QC 2004 & QC 2250 start
	if (!checkValidDateFormat(leaveDate,"Please enter a valid date.")){
		leaveDate.value = getDateAsString(new Date());
		return false;
	}
	if (!checkValidDateFormat(returnDate,"Please enter a valid date.")){
		returnDate.value = getDateAsString(new Date());
		return false;
	}
	if(searchForm.activeMenu.value == 'companyBusiness' || searchForm.activeMenu.value == 'nonRevenue'){
		if (!checkValidDateFormat(flightLeaveDate,"Please enter a valid date.")){
			flightLeaveDate.value = getDateAsString(new Date());
			return false;
		}
		if(dateType == 'flightLeave'){
			withinDateLimit(flightLeaveDate);
		}
	}
	//added a condition so that the return date will not be validated when the returnDate input field is disabled	
	if(dateType == 'return' && !searchForm.tripWay[1].checked){
		if(!withinDateLimit(returnDate)){
			returnDate.focus();
			return false;
		}
		if(returnDateValidation()){
			returnDate.focus();
			return false;
		}
	}
	if (dateType == 'leave'){
		if(searchForm.tripWay != null && searchForm.tripWay[0].checked == true){
			copyLeaveDate(dateType);
		}else{
			withinDateLimit(leaveDate);
		}
	}else if (dateType == 'EATleave'){
		copyLeaveDate(dateType);
	}
	//rqb 20120605 Dawgs QC 2004 & QC 2250 end
	if(dateType == '' || dateType == null){
		if(searchForm.searchType.value != null && searchForm.searchType.value != 'schedule'){
			if(flightLeaveDate !=null){		
				if (!withinDateLimit(flightLeaveDate)){
					flightLeaveDate.focus();
					return false;
				}
			}
		}else{
			if(leaveDate !=null){
				if (!withinDateLimit(leaveDate)){
					leaveDate.focus();
					return false;
				}
			}
			if(returnDate !=null){
				if (!withinDateLimit(returnDate)){
					returnDate.focus();
					return false;
				}
			}
		}
	}	
	return true;
}

//el end

// textDate should be string in format MM/dd/yyyy
function getDateValue(textDate) {
	var txtDate = textDate.split("/");
	
	var year = parseInt(txtDate[2]);
	var month = parseInt(txtDate[0],10);
	var day = parseInt(txtDate[1],10);
	month = month/1 -1; //January = 0
	var dateObj = new Date(year, month, day);//format : YYYY,mm,dd	
	
	var timeValue = dateObj.getTime();
	var days = 1000 * 60 * 60 * 24;
	var dateValue = timeValue / days;
	return dateValue.toFixed(); //rqb 20130128 Falcons QC 2785
}

// textDateTime should be string in format MM/dd/yyyy hh:mmAM/PM
function getDateTimeValue(textDate) {
	var dateObj = new Date();
	var txtDate = textDate.split("/");
	var month = getIntegerFromString(txtDate[0]) - 1;
	var day = getIntegerFromString(txtDate[1]);
	dateObj.setMonth(month,day);
	dateObj.setFullYear(getIntegerFromString(txtDate[2].substring(0, 4)));
	var hourPart = getIntegerFromString(txtDate[2].substring(5, 7));
	var minPart = getIntegerFromString(txtDate[2].substring(8, 10));
	var amPart = txtDate[2].substring(10);
	if (amPart == "PM" && hourPart < 12) {
		hourPart = hourPart + 12;
	//mdp 20170221 - QC #3393 TN is not converting 12:45am to 00:45. Issue in IT/ST and PROD Fix Start
	} else if(amPart == "AM" && hourPart == 12) { 
		hourPart = hourPart - 12; 
	}
	//mdp 20170221 - QC #3393 TN is not converting 12:45am to 00:45. Issue in IT/ST and PROD Fix End
	dateObj.setHours(hourPart);
	dateObj.setMinutes(minPart);
	return dateObj.getTime();
}

function isValidAwardTravelFlight(dapartType){
	var isValidFlightDate = true;
	var departureDate = "";
	var selOutId = getRadioChecked(document.forms[0].selectFlightOut);
	if (selOutId != null && selOutId != ""){
		var departObj = document.getElementById(dapartType + selOutId);
		if (departObj != null){
			departureDate = departObj.value;
		}
	}
	var currentDate = new Date();
	var month = currentDate.getMonth() + 1;
	var day = currentDate.getDate();
	var year = currentDate.getFullYear();
	if (month < 10){
		month = "0" + month;
	}
	if (day < 10){
		day = "0" + day;
	}
	var currDate = month + "/" + day + "/" + year;

	if (departureDate == currDate){
		isValidFlightDate = false;
	}
	return isValidFlightDate;
}

function getDateAsString(dateToString) {
	dateToString.setDate(dateToString.getDate());
	mm = dateToString.getMonth() + 1;
	dd = dateToString.getDate();
	yyyy = dateToString.getFullYear();
	var dateString = ((mm < 10) ? "0" : "") + mm;
	dateString += "/" + ((dd < 10) ? "0" : "") + dd;
	dateString += "/" + yyyy;
	return dateString;
}
//*********DATE FUNCTIONS END*************


//tlpa 20120501 QC 2328 TravelNet Admin Console start
function cancelLoggerSwitchChanges() {
	if(confirm("This will cancel the changes that you have done on the logger switches.  Are you sure you want to continue?")){
		document.forms[0].action = "adminConsoleShowPage.action";
		document.forms[0].submit();
	}
}

function saveLoggerSwitchChanges() {
	if(confirm("This will save all the changes that you have done on the logger switches.  Are you sure you want to continue?")){
		document.forms[0].action = "adminConsoleSaveLoggerSwitches.action";
		document.forms[0].submit();
	}
}

function resetAirportList() {
	if(confirm("This action will reset the airport list on your Airport Reference.  Are you sure you want to continue?")){
		document.forms[0].action = "adminConsoleRefreshAirportList.action";
		document.forms[0].submit();
	}
}

function setAdminConsoleButtons(){
	var isFireFox = false;
	if(navigator.appName.toUpperCase().indexOf("NETSCAPE")>=0) {
		isFireFox = true;
	}
	if(isFormChanged()){
		if(isFireFox) {
			getObject("saveButtonId").setAttribute("class", "buttonLink");
			getObject("cancelButtonId").setAttribute("class", "buttonLink");
	    } else {
			getObject("saveButtonId").setAttribute("className", "buttonLink");
			getObject("cancelButtonId").setAttribute("className", "buttonLink");
	    }
	}else{
		if(isFireFox) {
			getObject("saveButtonId").setAttribute("class", "buttonLinkDisabled");
			getObject("cancelButtonId").setAttribute("class", "buttonLinkDisabled");
	    } else {
			getObject("saveButtonId").setAttribute("className", "buttonLinkDisabled");
			getObject("cancelButtonId").setAttribute("className", "buttonLinkDisabled");
	    }	
	}
}

function isFormChanged() {
  	var optionsList;
	var selectList=document.getElementsByTagName("select");
	for (var i = 0; i < selectList.length; i++) {
		optionsList = selectList[i].getElementsByTagName("option");
		if(!optionsList[selectList[i].selectedIndex].defaultSelected){
			return(true);
		}
	}
	return(false);
}

function processAdminConsoleButton(buttonId, actionStr)	{
   	var linkButton = getObject(buttonId);
	var isFireFox = false;
	if(navigator.appName.toUpperCase().indexOf("NETSCAPE")>=0) {
		isFireFox = true;
	}

	var classname;
	if(isFireFox)
		classname = linkButton.getAttribute("class");
	else
		classname = linkButton.getAttribute("className");
	
	if(classname=='buttonLink'){
   		if(actionStr=="save"){
   			saveLoggerSwitchChanges();
   		}
   		else if(actionStr=="cancel"){
   			cancelLoggerSwitchChanges();
   		}
	}else if(classname=='buttonLinkDisabled') {
   	 	alert("There is no changes that has been done to the switches.");
   	}
}

function showResetAirportPopup(){
	 var retVal= window.showModalDialog("showResetAirportPopup.action","Account Activation Fee Payment",
					"dialogWidth:450px; dialogHeight:300px; scroll:off;");	
	 if(!checkNull(trim(retVal))){
		document.forms[0].action = "adminConsoleShowPage.action";
		document.forms[0].submit();
	 }
}
//tlpa 20120501 QC 2328 TravelNet Admin Console end

//rqb 20140228 TN Mobile
function switchToMobile(){
	showPageInPopup("","/WEB-INF/jsps/popup/confirmSwitchToMobilePopup.jsp", "300", "150");
}

//mdp 20151028 mulancelotCodeScan Open Redirect
function checkIfNumericDash(fieldObject) {
	var validChars = "1234567890-";
	return checkChars(fieldObject, validChars);
}

//mdp 20160111 - QC #3256 Default 'All flights' when searching using VIA
function viaAirportCheck(){
	var viaAirport = document.forms[0].viaAirport;
	var oneWay = document.forms[0].tripWay[1].checked;
	
	if (viaAirport.value != '' && viaAirport.value != null){
		if (document.forms[0].leaveTime.value == 'D') {
			document.forms[0].leaveTime.value = '12N';
		}
		if (!oneWay && !document.forms[0].returnTime.disabled 
				&& document.forms[0].returnTime.value == 'D') {
			document.forms[0].returnTime.value = '12N';
		}		
	} else {
		document.forms[0].leaveTime.value = 'D';
		if (!oneWay && !document.forms[0].returnTime.disabled) {
			document.forms[0].returnTime.value = 'D';
		}		
	}
}

/* rqb 20161026 DeltaSpirit3 */
function viaAirportCheckForEAT(){
	var outboundVia = document.forms[0].outboundVia;
	var returnVia = document.forms[0].returnVia;
	
	if (outboundVia.value != '' && outboundVia.value != null){
		if (document.forms[0].leaveTime.value == 'D') {
			document.forms[0].leaveTime.value = '12N';
		}
	} else {
		document.forms[0].leaveTime.value = 'D';
	}

	if (returnVia.value != '' && returnVia.value != null){
		if (document.forms[0].returnTime.value == 'D') {
			document.forms[0].returnTime.value = '12N';
		}
	} else {
		document.forms[0].returnTime.value = 'D';
	}
}

//cgb 20160204 QC 3309
function setUnder6Selected(value) {
	
	var under6Selected = document.getElementById("under6Selected");
	
	if (under6Selected != null) {
		
		if (value != null && value != "") {
			under6Selected.value = value;
		} else if (passengerUnder6Selected() || infantSSRSelected()) {
			under6Selected.value = "true";
		} else {
			under6Selected.value = "false";
		}
	}
}

//cgb 20160204 QC 3309
function passengerUnder6Selected() {
	
	var selPass = document.getElementsByName("selectPassengers");
	
	if (selPass != null && selPass.length){
		var under6 = document.getElementsByName("passengerUnder6");
		if (under6 != null && under6.length) {
			for (count = 0; count < under6.length; count++){
				for (index = 0; index < selPass.length; index++) {
					if (selPass[index].checked && (selPass[index].value == under6[count].value)) {
						return true;
					}
				}
			}
		}
	} 
	
	return false;
}

//cgb 20160204 QC 3309
function infantSSRSelected() {
	
	var serviceRequests = document.getElementsByName("serviceRequests");
	
	if (serviceRequests != null && serviceRequests.length) {
		for (index = 0; index < serviceRequests.length; index++) {
			var ssr = serviceRequests[index].value.split('-');
			if (serviceRequests[index].checked && ssr[1] == "INFT") {
				return true;
			}
		}
	}
	
	return false;
}

function addTravelCompanion() {
	document.forms[0].action = "addTravelCompanion.action";
	document.forms[0].submit();
}

// aay 20161005
function getSiblingById(node, id){
	var siblings = getSiblings(node);
	for (var idx = 0; idx < siblings.length; idx++){
		if(siblings[idx].id == id){
			return siblings[idx];
		}
	}
	
	return null;
}

function getChildById(children, id){
	for(var idx = 0; idx < children.length; idx++){
		if(children[idx].id == id){
			return children[idx];
		}
	}
}

function getChildren(node, excludeNode){
	var children = [];
	for( ; node; node = node.nextSibling ){
		if(node.nodeType == 1 && node != excludeNode){
			children.push(node);
		}
	}
	
	return children;
}

function getSiblings(node){
	return getChildren(node.parentNode.firstChild, node);
}

function associateToPassRider(obj){
	var passengers = document.getElementsByName("selectPassengers");
	var infantRequests = document.getElementsByName("infantRequests");
	
	if(obj==null){
		return;
	}
	
	for(var idx = 0; idx < passengers.length; idx++){
		var selectedAdultNbr = obj.options[obj.selectedIndex].value.substring(3,5);
		if(passengers[idx].value == selectedAdultNbr){
			selCheckPassenger(passengers[idx], true, null);
			break;
		}
	}
	
	toggleIIA();
}

function updateCompanionList(obj){
	var infantAssocSel = document.getElementsByName("inftCmpn");
	var onlyObjSelectIsVisible = true;
	var infantRequests = document.getElementsByName("infantRequests");
	var nrevHasInft = " ";
	
	for(var idx=0; idx < infantRequests.length; idx++){
		if(infantRequests[idx].checked){
			nrevHasInft = infantRequests[idx].value.split("-")[0];
		}
	}
	
	for(var idx = 0; idx < infantAssocSel.length; idx++){
		if(infantAssocSel[idx] != obj && infantAssocSel[idx].parentNode.style.display != "none"){
			var diffSel = infantAssocSel[idx];
			var objOptions = obj.options;
			onlyObjSelectIsVisible = false;
			for(var i = 0 ; i < objOptions.length; i++){
				var diffSelValue = diffSel.options[diffSel.selectedIndex].value.substring(3,5);
				var objValue = objOptions[i].value.substring(3,5);
				if((diffSelValue != "" && objValue != "" && diffSelValue == objValue) || nrevHasInft == objValue){
					objOptions[i].disabled = true;
				}else{
					objOptions[i].disabled = false;
				}
			}
		}
	}
	
	if(onlyObjSelectIsVisible){
		var objOptions = obj.options;
		for(var i = 0 ; i < objOptions.length; i++){
			var objValue = objOptions[i].value.substring(3,5);
			objOptions[i].disabled = false;
			if(objValue == nrevHasInft){
				objOptions[i].disabled = true;
			}
		}
	}
}

function toggleAssociateInfant(obj, type, nonRevNum){
	var infantAssoc = document.getElementById("inftAssoc" + nonRevNum);
	var siblingId = type != "checkbox" ? "psgrCheckBoxTD":"psgrTypeInftSeatTD";
	var siblingObj = getSiblingById(obj.parentNode, siblingId);
	var isInfantWoSeat = false;
	var isChecked = false;
	
	if(obj == null || siblingObj == null || infantAssoc == null){
		return;
	}
	
	if(type == "checkbox" && infantAssoc != null){
		var infantSeatSelect = getChildById(siblingObj.childNodes, "inftSeatValue");
		isInfantWoSeat = infantSeatSelect != null ? infantSeatSelect.options[infantSeatSelect.selectedIndex].value.indexOf("-infantWithSeat") == -1: false;
		isChecked = obj.checked;
		
	}else if(type == "dropdown"){
		var psgrCheck = getChildById(siblingObj.childNodes, "psgrCheckbox");
		isChecked = psgrCheck != null ? psgrCheck.checked: false;
		isInfantWoSeat = obj.options[obj.selectedIndex].value.indexOf("-infantWithSeat") == -1;
	}
	
	if(isChecked && siblingObj != null && isInfantWoSeat){
		infantAssoc.style.display = "block";
		updateCompanionList(getChildById(infantAssoc.childNodes, "selAdultCmpn" + nonRevNum));
		associateToPassRider(getChildById(infantAssoc.childNodes, "selAdultCmpn" + nonRevNum));
	}else{
		infantAssoc.style.display = "none";
		var select=getChildById(infantAssoc.childNodes, "selAdultCmpn" + nonRevNum)
		var option = select.options;
		option[0].selected = "selected";
		toggleIIA();
	}
}

function toggleIIA(){
	var infantAssocSel = document.getElementsByName("inftCmpn");
	var infantRequests = document.getElementsByName("infantRequests");
	var hasIIAChecked = false;
	
	for(var i=0; i < infantRequests.length; i++){
		if(infantRequests[i].checked){
			hasIIAChecked = true;
		}
		infantRequests[i].disabled = false;
		for(var idx = 0; idx < infantAssocSel.length; idx++){
			if(infantAssocSel[idx].parentNode.style.display != "none" && infantAssocSel[idx].value.substring(3,5) == infantRequests[i].value.split("-")[0]){
				infantRequests[i].disabled = true;
			}
		}	
	}
	
	for(var i=0; i < infantRequests.length; i++){
		if(!infantRequests[i].checked && hasIIAChecked){
			infantRequests[i].disabled = true;
		}
	}
}

function setInfantRequestDetails(source){
	var infantRequests = document.forms[0].infantRequests;
	if(infantRequests == null){
		infantRequests = document.forms[0].serviceRequests;
	}
	
	var infantRequest;
	var nonRevNum;
	var requestCode;
	var ssrInfant;
	var infantDetails;
	
	if (infantRequests != null){
		if (infantRequests.length){
			for (var i=0; i<infantRequests.length; i++){
				if (infantRequests[i].checked){
					infantRequest = infantRequests[i].value.split("-");
					nonRevNum = infantRequest[0];
					requestCode = infantRequest[1];
					// mia 20100827 infant field validation start
					if (requestCode == 'INFT'){
						ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
						infantDetails = ssrInfant.getElementsByTagName("INPUT");
						if (infantDetails[0] == null || infantDetails[0].value == "" || checkForSpace(infantDetails[0])){
							alert("Please enter the first name of the infant.");
							infantDetails[0].focus();
							return false;
						}else if(!checkIfAlphaNoSpace(infantDetails[0])){
							alert("First name of the infant must be alphabetic.");
							infantDetails[0].focus();	
							return false;
						}
						if (infantDetails[1] != null && trim(infantDetails[1].value)!= ""  && infantDetails[1].value != " " 
							&& !checkIfAlphaNoSpace(infantDetails[1])){
							alert("Middle initial of the infant must be alphabetic.");
							infantDetails[1].focus();	
							return false;
						}
						if (infantDetails[2] == null || infantDetails[2].value == "" || checkForSpace(infantDetails[2])){
							alert("Please enter the last name of the infant.");
							infantDetails[2].focus();
							return false;
						}else if(!checkIfAlphaNoSpace(infantDetails[2])){
							alert("Last name of the infant must be alphabetic.");
							infantDetails[2].focus();	
							return false;
						}
						// mia 20100827 infant field validation end
						if (infantDetails[3] == null || infantDetails[3].value == ""){
							alert("Please enter the date of birth of the infant.");
							infantDetails[3].focus();
							return false;
						}
						if (!checkBirthDateFormat(infantDetails[3], "Please enter a valid date of birth.", true)){
							return false;
						}
						infantRequests[i].value = nonRevNum + "-" + requestCode + "-" + infantDetails[0].value + "-" + infantDetails[1].value + "-" + infantDetails[2].value + "-" + infantDetails[3].value;
						if (source != "" && source != null){
							validateInfantSsr(source);
						}
					}
				}			
			}
			return true;
		}else{
			if (infantRequests.checked){
				infantRequest = infantantRequests.value.split("-");
				nonRevNum = infantRequest[0];
				requestCode = infantRequest[1];
				if (requestCode == 'INFT'){
					ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
					infantDetails = ssrInfant.getElementsByTagName("INPUT");
					if (!checkBirthDateFormat(infantDetails[3], "Please enter a valid date of birth.", true)){
						return false;
					}
					if (infantDetails[0] == null || infantDetails[0].value == ""  || checkForSpace(infantDetails[0])){
						alert("Please enter the first name of the infant.");
						infantDetails[0].focus();
						return false;
					}else if(!checkIfAlphaNoSpace(infantDetails[0])){
						alert("First name of the infant must be alphabetic.");
						infantDetails[0].focus();	
						return false;
					}
					if (infantDetails[1]!= null && trim(infantDetails[1].value) != "" && infantDetails[1].value != " " 
						&& !checkIfAlphaNoSpace(infantDetails[1])){
						alert("Middle initial of the infant must be alphabetic.");
						infantDetails[1].focus();	
						return false;
					}
					if (infantDetails[2] == null || infantDetails[2].value == "" || checkForSpace(infantDetails[2])){
						alert("Please enter the last name of the infant.");
						infantDetails[2].focus();
						return false;
					}else if(!checkIfAlphaNoSpace(infantDetails[2])){
						alert("Last name of the infant must be alphabetic.");
						infantDetails[2].focus();
						return false;
					}
					if (infantDetails[3] == null || infantDetails[3].value == ""){
						alert("Please enter the date of birth of the infant.");
						infantDetails[3].focus();
						return false;
					}
					
					infantRequests[i].value = nonRevNum + "-" + requestCode + "-" + infantDetails[0].value + "-" + infantDetails[1].value + "-" + infantDetails[2].value + "-" + infantDetails[3].value;
					if (source != "" && source != null){
						validateInfantSsr(source);
					}
					return true;
				}
			}
		}
	}

	return true;
}

function checkInfant(checkObj, nonRevNum){
// var carrierCode = document.getElementById("carrierCode");
// if(carrierCode != null && carrierCode.value == "NW"){
		var ssrContainer = document.getElementById("ssrContainer" + nonRevNum);
		var ssrInfant = document.getElementById("ssrInfant" + nonRevNum);
		
		var infantRequests = document.getElementsByName("infantRequests");
		for ( var ii = 0; ii < infantRequests.length; ii++) {
			if (infantRequests[ii].value != null
					&& infantRequests[ii].value != ""
					&& infantRequests[ii].value.substring(0, 2) == nonRevNum) {
				infantRequests[ii].selectedIndex = 0;
				infantRequests[ii].checked = false;
			}
		}
		
		if (ssrContainer != null) {
			ssrContainer.style.display = "none";
			ssrContainer.style.visibility = "hidden";
		}
		
		if (ssrInfant != null) {
			ssrInfant.style.display = "none";
			ssrInfant.style.visibility = "hidden";
		}
		
		toggleIIA();
// }
	
}

function checkedInfantExists(nonRevNum) {
	var ssrObj = document.getElementsByName("infantRequests");
	if (ssrObj.length) {
		for ( var ii = 0; ii < ssrObj.length; ii++) {
			if (ssrObj[ii].checked) {
				var ssr = ssrObj[ii].value.split('-');
				if (ssr[0] != null && ssr[0] == nonRevNum) {
					return true;
				}
			}
		}
	} else if (ssrObj != null && ssrObj.checked) {
		var ssrs = ssrObj.value.split('-');
		if (ssrs[0] != null && ssrs[0] == nonRevNum) {
			return true;
		}
	}
	return false;
}

//aay 20161122 Infant ET - start
function showIIANotAllowedWarning(){
	alert("To book an infant in arms for Fly Confirmed Discount Program, kindly contact reservations.");
	
	return false;
}

function isAssociatedToInfant(checkedObj){
	var checkedValue = checkedObj.value;
	var infantAssocSel = document.getElementsByName("inftCmpn");
	var isAssociated = false;
	
	for(var idx = 0; idx < infantAssocSel.length; idx++){
		if(infantAssocSel[idx].parentNode.style.display != "none" && infantAssocSel[idx].value.substring(3,5) == checkedValue){
			isAssociated = true;
			break;
		}
	}
	
	return isAssociated;
}

function changeAwardTravel(){
	var isMerged = document.getElementById("isMerged");
	if(isMerged != null && isMerged.value){
		alert("To Change This Listing, Call Reservations.");
	}else{
		location.href="oneGreatTeamChange.action?confNumber=viewListing";
	}
}
//aay 20161122 Infant ET - end
